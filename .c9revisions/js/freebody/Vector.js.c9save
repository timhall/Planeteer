{"ts":1354997462848,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * Vector class for simply representing force, velocity, etc.\r\n */\r\n\r\ndefine(\r\n['src/utils'],\r\nfunction (utils) {\r\n    \r\n    /**\r\n     * @class Vector\r\n     * @param {Number} [magnitude]\r\n     * @param {Number} [angle]\r\n     */\r\n    \r\n    var Vector = function (magnitude, angle) {\r\n        // Set instance values for magnitude and angle\r\n        this._magnitude = (magnitude || 0);\r\n        this._angle = (angle || 0);\r\n        \r\n        return this;\r\n    };\r\n    \r\n    /**\r\n     * @prototype\r\n     */\r\n    Vector.prototype = {\r\n        \r\n        /**\r\n         * Determine the magnitude of the vector\r\n         *\r\n         * @param {Number} [value] Optional, set new value\r\n         * @return {Number} magnitude\r\n         * @prototype\r\n         * @chainable\r\n         */\r\n         \r\n        magnitude: function (value) {\r\n            if (value !== undefined) { \r\n                // Setter \r\n                this._magnitude = value; \r\n        \r\n                // Return parent for chaining \r\n                return this; \r\n            } else { \r\n                // Getter \r\n                return this._magnitude; \r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Determine the angle of the vector\r\n         *\r\n         * @param {Number} [value] Optional, set new value\r\n         * @return {Number} angle\r\n         * @prototype\r\n         * @chainable\r\n         */\r\n        \r\n        angle: function (value) {\r\n            if (value !== undefined) { \r\n                // Setter \r\n                this._angle = value; \r\n        \r\n                // Return parent for chaining \r\n                return this; \r\n            } else { \r\n                // Getter \r\n                return this._angle; \r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Determine the x-component of the vector\r\n         *\r\n         * @param {Number} [value] Optional, set new value\r\n         * @return {Number} x-component\r\n         * @prototype\r\n         * @chainable\r\n         */\r\n         \r\n        x: function (value) {\r\n            if (value !== undefined) { \r\n                setMagnitudeAndAngle(this, value, this.y()); \r\n                return this; \r\n            } else { \r\n                return this._magnitude * Math.cos(utils.radians(this._angle)); \r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Determine the y-component of the vector\r\n         *\r\n         * @param {Number} [value] Optional, set new value\r\n         * @return {Number} y-component\r\n         * @prototype\r\n         * @chainable\r\n         */\r\n                \r\n        y: function (value) {\r\n            if (value !== undefined) { \r\n                setMagnitudeAndAngle(this, this.x(), value); \r\n                return this; \r\n            } else { \r\n                return this._magnitude * Math.sin(utils.radians(this._angle)); \r\n            }    \r\n        }\r\n    }\r\n    \r\n    var setMagnitudeAndAngle = function (vector, xValue, yValue) { \r\n        vector._magnitude = utils.hypotenuse(xValue, yValue); \r\n        vector._angle = utils.degrees(Math.atan2(yValue, xValue)); \r\n    }\r\n    \r\n    window.Vector = Vector;\r\n    return Vector;\r\n});\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3144}]],"length":3144}
{"contributors":["tim.hall.engr@gmail.com"],"silentsave":false,"ts":1354997462491,"patch":[[{"diffs":[[0,"\r\n['"],[-1,"src"],[1,"freebody"],[0,"/uti"]],"start1":82,"start2":82,"length1":11,"length2":16}]],"length":3149,"saved":false}
