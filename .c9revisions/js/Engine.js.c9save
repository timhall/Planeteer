{"ts":1355000161686,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"define(\r\n[],\r\nfunction () {\r\n    // This is the \"game\" engine\r\n    // It's pretty much only in charge of managing the two loops\r\n    // and then calling any update / draw functions on objects\r\n    var Engine = function () {\r\n        var engine = this,\r\n            rAF = window.requestAnimationFrame,\r\n            frameRate = 60,\r\n            objects = [], prevTime = +new Date,\r\n        \r\n        // Kept this separate in case there is any other initializing code\r\n        start = function () {\r\n            run();\r\n        },\r\n        \r\n        // When starting the game engine, update and render\r\n        run = function () {\r\n            update();\r\n            render();    \r\n        },\r\n        \r\n        // Update the physics / position of objects\r\n        update = function () {\r\n            // Use a set timeout here so that it is always 60 fps\r\n            // This might be something that is variable later depending on what the device can handle\r\n            // This is a recursive loop\r\n            // (call the update function 1000/60 ms from now)\r\n            // setTimeout(update, 1000/frameRate);\r\n            \r\n            var currTime = +new Date;\r\n            var timestep = currTime - prevTime;\r\n            prevTime = currTime;\r\n            \r\n            // Loop through all the objects and call update()\r\n            // (bc length may change, can't cache it)\r\n            for (var i = 0; i < objects.length; i += 1) {\r\n                // If objects[i] = null, remove it from objects\r\n                if (objects[i] === null) {\r\n                    objects.splice(i, 1); // Remove 1 item at i index\r\n                    \r\n                    // splice( at index, number of things to remove, things to add)\r\n                    // splice(2, 1, 'a', 'b')\r\n                    // just removes stuff if you don't give anything to add\r\n                } else {\r\n                    if (typeof objects[i].update === 'function') {\r\n                        objects[i].update(timestep);   \r\n                    }\r\n                }\r\n            }\r\n        },\r\n        \r\n        // Render all of the objects\r\n        render = function (timestamp) {\r\n            // Use a requestAnimationFrame to use the same render pipeline as the browser\r\n            // so that the optimal framerate is used\r\n            // (This is a special \"timeout\" meaning roughly request an animation frame\r\n            //  frome the browser and when the browser gives us one call the render function\r\n            // (also recursive)\r\n            rAF(render);\r\n            \r\n            update();\r\n            \r\n            // Loop through all the objects and draw()\r\n            for (var i = 0; i < objects.length; i += 1) {\r\n                // If objects[i] = null, remove it from objects\r\n                if (objects[i] === null) {\r\n                    objects.splice(i, 1);\r\n                } else {\r\n                    objects[i].draw();  \r\n                }\r\n            }\r\n        };\r\n        \r\n        return {\r\n            start: start,\r\n            objects: objects\r\n        };\r\n    };\r\n    \r\n    return Engine;\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":3111}]],"length":3111}
