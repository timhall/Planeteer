{"ts":1356310042705,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Updated requestAnimationFrame polyfill that uses new high-resolution timestamp\r\n//\r\n// References:\r\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n// https://gist.github.com/1579671\r\n// http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\r\n//\r\n// Note: this is my initial stab at it, *requires additional testing*\r\n\r\n(function () {\r\n    var lastTime = 0,\r\n        vendors = ['webkit', 'ms', 'moz', 'o'],\r\n        // Feature check for performance (high-resolution timers)\r\n        hasPerformance = !!(window.performance && window.performance.now);\r\n\r\n    for(var x = 0, max = vendors.length; x < max && !window.requestAnimationFrame; x += 1) {\r\n        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\r\n        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] \r\n                                   || window[vendors[x]+'CancelRequestAnimationFrame'];\r\n    }\r\n\r\n    if (!window.requestAnimationFrame) {\r\n        window.requestAnimationFrame = function(callback, element) {\r\n            var currTime = new Date().getTime(),\r\n                timeToCall = Math.max(0, 16 - (currTime - lastTime)),\r\n                id = window.setTimeout(function() { callback(currTime + timeToCall); }, \r\n                    timeToCall);\r\n            \r\n            lastTime = currTime + timeToCall;\r\n            return id;\r\n        };\r\n    }\r\n \r\n    if (!window.cancelAnimationFrame) {\r\n        window.cancelAnimationFrame = function(id) {\r\n            clearTimeout(id);\r\n        };\r\n    }\r\n\r\n    // Add new wrapper for browsers that don't have performance\r\n    if (!hasPerformance) {\r\n        // Store reference to existing rAF and initial startTime\r\n        var rAF = window.requestAnimationFrame,\r\n            startTime = +new Date;\r\n\r\n        // Override window rAF to include wrapped callback\r\n        window.requestAnimationFrame = function (callback, element) {\r\n            // Wrap the given callback to pass in performance timestamp\r\n            var wrapped = function (timestamp) {\r\n                // Get performance-style timestamp\r\n                var performanceTimestamp = (timestamp < 1e12) \r\n                    ? timestamp \r\n                    : timestamp - startTime;\r\n\r\n                return callback(performanceTimestamp);\r\n            };\r\n\r\n            // Call original rAF with wrapped callback\r\n            rAF(wrapped, element);\r\n        }        \r\n    }\r\n})();"]],"start1":0,"start2":0,"length1":0,"length2":2489}]],"length":2489}
