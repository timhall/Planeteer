{"ts":1356810675735,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"jasmine.HtmlReporterHelpers = {};\r\n\r\njasmine.HtmlReporterHelpers.createDom = function (type, attrs, childrenVarArgs) {\r\n    var el = document.createElement(type);\r\n\r\n    for (var i = 2; i < arguments.length; i++) {\r\n        var child = arguments[i];\r\n\r\n        if (typeof child === 'string') {\r\n            el.appendChild(document.createTextNode(child));\r\n        } else {\r\n            if (child) {\r\n                el.appendChild(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    for (var attr in attrs) {\r\n        if (attr == \"className\") {\r\n            el[attr] = attrs[attr];\r\n        } else {\r\n            el.setAttribute(attr, attrs[attr]);\r\n        }\r\n    }\r\n\r\n    return el;\r\n};\r\n\r\njasmine.HtmlReporterHelpers.getSpecStatus = function (child) {\r\n    var results = child.results();\r\n    var status = results.passed() ? 'passed' : 'failed';\r\n    if (results.skipped) {\r\n        status = 'skipped';\r\n    }\r\n\r\n    return status;\r\n};\r\n\r\njasmine.HtmlReporterHelpers.appendToSummary = function (child, childElement) {\r\n    var parentDiv = this.dom.summary;\r\n    var parentSuite = (typeof child.parentSuite == 'undefined') ? 'suite' : 'parentSuite';\r\n    var parent = child[parentSuite];\r\n\r\n    if (parent) {\r\n        if (typeof this.views.suites[parent.id] == 'undefined') {\r\n            this.views.suites[parent.id] = new jasmine.HtmlReporter.SuiteView(parent, this.dom, this.views);\r\n        }\r\n        parentDiv = this.views.suites[parent.id].element;\r\n    }\r\n\r\n    parentDiv.appendChild(childElement);\r\n};\r\n\r\n\r\njasmine.HtmlReporterHelpers.addHelpers = function (ctor) {\r\n    for (var fn in jasmine.HtmlReporterHelpers) {\r\n        ctor.prototype[fn] = jasmine.HtmlReporterHelpers[fn];\r\n    }\r\n};\r\n\r\njasmine.HtmlReporter = function (_doc) {\r\n    var self = this;\r\n    var doc = _doc || window.document;\r\n\r\n    var reporterView;\r\n\r\n    var dom = {};\r\n\r\n    // Jasmine Reporter Public Interface\r\n    self.logRunningSpecs = false;\r\n\r\n    self.reportRunnerStarting = function (runner) {\r\n        var specs = runner.specs() || [];\r\n\r\n        if (specs.length == 0) {\r\n            return;\r\n        }\r\n\r\n        createReporterDom(runner.env.versionString());\r\n        doc.body.appendChild(dom.reporter);\r\n\r\n        reporterView = new jasmine.HtmlReporter.ReporterView(dom);\r\n        reporterView.addSpecs(specs, self.specFilter);\r\n    };\r\n\r\n    self.reportRunnerResults = function (runner) {\r\n        reporterView && reporterView.complete();\r\n    };\r\n\r\n    self.reportSuiteResults = function (suite) {\r\n        reporterView.suiteComplete(suite);\r\n    };\r\n\r\n    self.reportSpecStarting = function (spec) {\r\n        if (self.logRunningSpecs) {\r\n            self.log('>> Jasmine Running ' + spec.suite.description + ' ' + spec.description + '...');\r\n        }\r\n    };\r\n\r\n    self.reportSpecResults = function (spec) {\r\n        reporterView.specComplete(spec);\r\n    };\r\n\r\n    self.log = function () {\r\n        var console = jasmine.getGlobal().console;\r\n        if (console && console.log) {\r\n            if (console.log.apply) {\r\n                console.log.apply(console, arguments);\r\n            } else {\r\n                console.log(arguments); // ie fix: console.log.apply doesn't exist on ie\r\n            }\r\n        }\r\n    };\r\n\r\n    self.specFilter = function (spec) {\r\n        if (!focusedSpecName()) {\r\n            return true;\r\n        }\r\n\r\n        return spec.getFullName().indexOf(focusedSpecName()) === 0;\r\n    };\r\n\r\n    return self;\r\n\r\n    function focusedSpecName() {\r\n        var specName;\r\n\r\n        (function memoizeFocusedSpec() {\r\n            if (specName) {\r\n                return;\r\n            }\r\n\r\n            var paramMap = [];\r\n            var params = doc.location.search.substring(1).split('&');\r\n\r\n            for (var i = 0; i < params.length; i++) {\r\n                var p = params[i].split('=');\r\n                paramMap[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);\r\n            }\r\n\r\n            specName = paramMap.spec;\r\n        })();\r\n\r\n        return specName;\r\n    }\r\n\r\n    function createReporterDom(version) {\r\n        dom.reporter = self.createDom('div', { id: 'HTMLReporter', className: 'jasmine_reporter' },\r\n          dom.banner = self.createDom('div', { className: 'banner' },\r\n            self.createDom('span', { className: 'title' }, \"Jasmine \"),\r\n            self.createDom('span', { className: 'version' }, version)),\r\n\r\n          dom.symbolSummary = self.createDom('ul', { className: 'symbolSummary' }),\r\n          dom.alert = self.createDom('div', { className: 'alert' }),\r\n          dom.results = self.createDom('div', { className: 'results' },\r\n            dom.summary = self.createDom('div', { className: 'summary' }),\r\n            dom.details = self.createDom('div', { id: 'details' }))\r\n        );\r\n    }\r\n};\r\njasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter); jasmine.HtmlReporter.ReporterView = function (dom) {\r\n    this.startedAt = new Date();\r\n    this.runningSpecCount = 0;\r\n    this.completeSpecCount = 0;\r\n    this.passedCount = 0;\r\n    this.failedCount = 0;\r\n    this.skippedCount = 0;\r\n\r\n    this.createResultsMenu = function () {\r\n        this.resultsMenu = this.createDom('span', { className: 'resultsMenu bar' },\r\n          this.summaryMenuItem = this.createDom('a', { className: 'summaryMenuItem', href: \"#\" }, '0 specs'),\r\n          ' | ',\r\n          this.detailsMenuItem = this.createDom('a', { className: 'detailsMenuItem', href: \"#\" }, '0 failing'));\r\n\r\n        this.summaryMenuItem.onclick = function () {\r\n            dom.reporter.className = dom.reporter.className.replace(/ showDetails/g, '');\r\n        };\r\n\r\n        this.detailsMenuItem.onclick = function () {\r\n            showDetails();\r\n        };\r\n    };\r\n\r\n    this.addSpecs = function (specs, specFilter) {\r\n        this.totalSpecCount = specs.length;\r\n\r\n        this.views = {\r\n            specs: {},\r\n            suites: {}\r\n        };\r\n\r\n        for (var i = 0; i < specs.length; i++) {\r\n            var spec = specs[i];\r\n            this.views.specs[spec.id] = new jasmine.HtmlReporter.SpecView(spec, dom, this.views);\r\n            if (specFilter(spec)) {\r\n                this.runningSpecCount++;\r\n            }\r\n        }\r\n    };\r\n\r\n    this.specComplete = function (spec) {\r\n        this.completeSpecCount++;\r\n\r\n        if (isUndefined(this.views.specs[spec.id])) {\r\n            this.views.specs[spec.id] = new jasmine.HtmlReporter.SpecView(spec, dom);\r\n        }\r\n\r\n        var specView = this.views.specs[spec.id];\r\n\r\n        switch (specView.status()) {\r\n            case 'passed':\r\n                this.passedCount++;\r\n                break;\r\n\r\n            case 'failed':\r\n                this.failedCount++;\r\n                break;\r\n\r\n            case 'skipped':\r\n                this.skippedCount++;\r\n                break;\r\n        }\r\n\r\n        specView.refresh();\r\n        this.refresh();\r\n    };\r\n\r\n    this.suiteComplete = function (suite) {\r\n        var suiteView = this.views.suites[suite.id];\r\n        if (isUndefined(suiteView)) {\r\n            return;\r\n        }\r\n        suiteView.refresh();\r\n    };\r\n\r\n    this.refresh = function () {\r\n\r\n        if (isUndefined(this.resultsMenu)) {\r\n            this.createResultsMenu();\r\n        }\r\n\r\n        // currently running UI\r\n        if (isUndefined(this.runningAlert)) {\r\n            this.runningAlert = this.createDom('a', { href: \"?\", className: \"runningAlert bar\" });\r\n            dom.alert.appendChild(this.runningAlert);\r\n        }\r\n        this.runningAlert.innerHTML = \"Running \" + this.completeSpecCount + \" of \" + specPluralizedFor(this.totalSpecCount);\r\n\r\n        // skipped specs UI\r\n        if (isUndefined(this.skippedAlert)) {\r\n            this.skippedAlert = this.createDom('a', { href: \"?\", className: \"skippedAlert bar\" });\r\n        }\r\n\r\n        this.skippedAlert.innerHTML = \"Skipping \" + this.skippedCount + \" of \" + specPluralizedFor(this.totalSpecCount) + \" - run all\";\r\n\r\n        if (this.skippedCount === 1 && isDefined(dom.alert)) {\r\n            dom.alert.appendChild(this.skippedAlert);\r\n        }\r\n\r\n        // passing specs UI\r\n        if (isUndefined(this.passedAlert)) {\r\n            this.passedAlert = this.createDom('span', { href: \"?\", className: \"passingAlert bar\" });\r\n        }\r\n        this.passedAlert.innerHTML = \"Passing \" + specPluralizedFor(this.passedCount);\r\n\r\n        // failing specs UI\r\n        if (isUndefined(this.failedAlert)) {\r\n            this.failedAlert = this.createDom('span', { href: \"?\", className: \"failingAlert bar\" });\r\n        }\r\n        this.failedAlert.innerHTML = \"Failing \" + specPluralizedFor(this.failedCount);\r\n\r\n        if (this.failedCount === 1 && isDefined(dom.alert)) {\r\n            dom.alert.appendChild(this.failedAlert);\r\n            dom.alert.appendChild(this.resultsMenu);\r\n        }\r\n\r\n        // summary info\r\n        this.summaryMenuItem.innerHTML = \"\" + specPluralizedFor(this.runningSpecCount);\r\n        this.detailsMenuItem.innerHTML = \"\" + this.failedCount + \" failing\";\r\n    };\r\n\r\n    this.complete = function () {\r\n        dom.alert.removeChild(this.runningAlert);\r\n\r\n        this.skippedAlert.innerHTML = \"Ran \" + this.runningSpecCount + \" of \" + specPluralizedFor(this.totalSpecCount) + \" - run all\";\r\n\r\n        if (this.failedCount === 0) {\r\n            dom.alert.appendChild(this.createDom('span', { className: 'passingAlert bar' }, \"Passing \" + specPluralizedFor(this.passedCount)));\r\n        } else {\r\n            showDetails();\r\n        }\r\n\r\n        dom.banner.appendChild(this.createDom('span', { className: 'duration' }, \"finished in \" + ((new Date().getTime() - this.startedAt.getTime()) / 1000) + \"s\"));\r\n    };\r\n\r\n    return this;\r\n\r\n    function showDetails() {\r\n        if (dom.reporter.className.search(/showDetails/) === -1) {\r\n            dom.reporter.className += \" showDetails\";\r\n        }\r\n    }\r\n\r\n    function isUndefined(obj) {\r\n        return typeof obj === 'undefined';\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return !isUndefined(obj);\r\n    }\r\n\r\n    function specPluralizedFor(count) {\r\n        var str = count + \" spec\";\r\n        if (count > 1) {\r\n            str += \"s\"\r\n        }\r\n        return str;\r\n    }\r\n\r\n};\r\n\r\njasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.ReporterView);\r\n\r\n\r\njasmine.HtmlReporter.SpecView = function (spec, dom, views) {\r\n    this.spec = spec;\r\n    this.dom = dom;\r\n    this.views = views;\r\n\r\n    this.symbol = this.createDom('li', { className: 'pending' });\r\n    this.dom.symbolSummary.appendChild(this.symbol);\r\n\r\n    this.summary = this.createDom('div', { className: 'specSummary' },\r\n        this.createDom('a', {\r\n            className: 'description',\r\n            href: '?spec=' + encodeURIComponent(this.spec.getFullName()),\r\n            title: this.spec.getFullName()\r\n        }, this.spec.description)\r\n    );\r\n\r\n    this.detail = this.createDom('div', { className: 'specDetail' },\r\n        this.createDom('a', {\r\n            className: 'description',\r\n            href: '?spec=' + encodeURIComponent(this.spec.getFullName()),\r\n            title: this.spec.getFullName()\r\n        }, this.spec.getFullName())\r\n    );\r\n};\r\n\r\njasmine.HtmlReporter.SpecView.prototype.status = function () {\r\n    return this.getSpecStatus(this.spec);\r\n};\r\n\r\njasmine.HtmlReporter.SpecView.prototype.refresh = function () {\r\n    this.symbol.className = this.status();\r\n\r\n    switch (this.status()) {\r\n        case 'skipped':\r\n            break;\r\n\r\n        case 'passed':\r\n            this.appendSummaryToSuiteDiv();\r\n            break;\r\n\r\n        case 'failed':\r\n            this.appendSummaryToSuiteDiv();\r\n            this.appendFailureDetail();\r\n            break;\r\n    }\r\n};\r\n\r\njasmine.HtmlReporter.SpecView.prototype.appendSummaryToSuiteDiv = function () {\r\n    this.summary.className += ' ' + this.status();\r\n    this.appendToSummary(this.spec, this.summary);\r\n};\r\n\r\njasmine.HtmlReporter.SpecView.prototype.appendFailureDetail = function () {\r\n    this.detail.className += ' ' + this.status();\r\n\r\n    var resultItems = this.spec.results().getItems();\r\n    var messagesDiv = this.createDom('div', { className: 'messages' });\r\n\r\n    for (var i = 0; i < resultItems.length; i++) {\r\n        var result = resultItems[i];\r\n\r\n        if (result.type == 'log') {\r\n            messagesDiv.appendChild(this.createDom('div', { className: 'resultMessage log' }, result.toString()));\r\n        } else if (result.type == 'expect' && result.passed && !result.passed()) {\r\n            messagesDiv.appendChild(this.createDom('div', { className: 'resultMessage fail' }, result.message));\r\n\r\n            if (result.trace.stack) {\r\n                messagesDiv.appendChild(this.createDom('div', { className: 'stackTrace' }, result.trace.stack));\r\n            }\r\n        }\r\n    }\r\n\r\n    if (messagesDiv.childNodes.length > 0) {\r\n        this.detail.appendChild(messagesDiv);\r\n        this.dom.details.appendChild(this.detail);\r\n    }\r\n};\r\n\r\njasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.SpecView); jasmine.HtmlReporter.SuiteView = function (suite, dom, views) {\r\n    this.suite = suite;\r\n    this.dom = dom;\r\n    this.views = views;\r\n\r\n    this.element = this.createDom('div', { className: 'suite' },\r\n        this.createDom('a', { className: 'description', href: '?spec=' + encodeURIComponent(this.suite.getFullName()) }, this.suite.description)\r\n    );\r\n\r\n    this.appendToSummary(this.suite, this.element);\r\n};\r\n\r\njasmine.HtmlReporter.SuiteView.prototype.status = function () {\r\n    return this.getSpecStatus(this.suite);\r\n};\r\n\r\njasmine.HtmlReporter.SuiteView.prototype.refresh = function () {\r\n    this.element.className += \" \" + this.status();\r\n};\r\n\r\njasmine.HtmlReporterHelpers.addHelpers(jasmine.HtmlReporter.SuiteView);\r\n\r\n/* @deprecated Use jasmine.HtmlReporter instead\r\n */\r\njasmine.TrivialReporter = function (doc) {\r\n    this.document = doc || document;\r\n    this.suiteDivs = {};\r\n    this.logRunningSpecs = false;\r\n};\r\n\r\njasmine.TrivialReporter.prototype.createDom = function (type, attrs, childrenVarArgs) {\r\n    var el = document.createElement(type);\r\n\r\n    for (var i = 2; i < arguments.length; i++) {\r\n        var child = arguments[i];\r\n\r\n        if (typeof child === 'string') {\r\n            el.appendChild(document.createTextNode(child));\r\n        } else {\r\n            if (child) { el.appendChild(child); }\r\n        }\r\n    }\r\n\r\n    for (var attr in attrs) {\r\n        if (attr == \"className\") {\r\n            el[attr] = attrs[attr];\r\n        } else {\r\n            el.setAttribute(attr, attrs[attr]);\r\n        }\r\n    }\r\n\r\n    return el;\r\n};\r\n\r\njasmine.TrivialReporter.prototype.reportRunnerStarting = function (runner) {\r\n    var showPassed, showSkipped;\r\n\r\n    this.outerDiv = this.createDom('div', { id: 'TrivialReporter', className: 'jasmine_reporter' },\r\n        this.createDom('div', { className: 'banner' },\r\n          this.createDom('div', { className: 'logo' },\r\n              this.createDom('span', { className: 'title' }, \"Jasmine\"),\r\n              this.createDom('span', { className: 'version' }, runner.env.versionString())),\r\n          this.createDom('div', { className: 'options' },\r\n              \"Show \",\r\n              showPassed = this.createDom('input', { id: \"__jasmine_TrivialReporter_showPassed__\", type: 'checkbox' }),\r\n              this.createDom('label', { \"for\": \"__jasmine_TrivialReporter_showPassed__\" }, \" passed \"),\r\n              showSkipped = this.createDom('input', { id: \"__jasmine_TrivialReporter_showSkipped__\", type: 'checkbox' }),\r\n              this.createDom('label', { \"for\": \"__jasmine_TrivialReporter_showSkipped__\" }, \" skipped\")\r\n              )\r\n            ),\r\n\r\n        this.runnerDiv = this.createDom('div', { className: 'runner running' },\r\n            this.createDom('a', { className: 'run_spec', href: '?' }, \"run all\"),\r\n            this.runnerMessageSpan = this.createDom('span', {}, \"Running...\"),\r\n            this.finishedAtSpan = this.createDom('span', { className: 'finished-at' }, \"\"))\r\n        );\r\n\r\n    this.document.body.appendChild(this.outerDiv);\r\n\r\n    var suites = runner.suites();\r\n    for (var i = 0; i < suites.length; i++) {\r\n        var suite = suites[i];\r\n        var suiteDiv = this.createDom('div', { className: 'suite' },\r\n            this.createDom('a', { className: 'run_spec', href: '?spec=' + encodeURIComponent(suite.getFullName()) }, \"run\"),\r\n            this.createDom('a', { className: 'description', href: '?spec=' + encodeURIComponent(suite.getFullName()) }, suite.description));\r\n        this.suiteDivs[suite.id] = suiteDiv;\r\n        var parentDiv = this.outerDiv;\r\n        if (suite.parentSuite) {\r\n            parentDiv = this.suiteDivs[suite.parentSuite.id];\r\n        }\r\n        parentDiv.appendChild(suiteDiv);\r\n    }\r\n\r\n    this.startedAt = new Date();\r\n\r\n    var self = this;\r\n    showPassed.onclick = function (evt) {\r\n        if (showPassed.checked) {\r\n            self.outerDiv.className += ' show-passed';\r\n        } else {\r\n            self.outerDiv.className = self.outerDiv.className.replace(/ show-passed/, '');\r\n        }\r\n    };\r\n\r\n    showSkipped.onclick = function (evt) {\r\n        if (showSkipped.checked) {\r\n            self.outerDiv.className += ' show-skipped';\r\n        } else {\r\n            self.outerDiv.className = self.outerDiv.className.replace(/ show-skipped/, '');\r\n        }\r\n    };\r\n};\r\n\r\njasmine.TrivialReporter.prototype.reportRunnerResults = function (runner) {\r\n    var results = runner.results();\r\n    var className = (results.failedCount > 0) ? \"runner failed\" : \"runner passed\";\r\n    this.runnerDiv.setAttribute(\"class\", className);\r\n    //do it twice for IE\r\n    this.runnerDiv.setAttribute(\"className\", className);\r\n    var specs = runner.specs();\r\n    var specCount = 0;\r\n    for (var i = 0; i < specs.length; i++) {\r\n        if (this.specFilter(specs[i])) {\r\n            specCount++;\r\n        }\r\n    }\r\n    var message = \"\" + specCount + \" spec\" + (specCount == 1 ? \"\" : \"s\") + \", \" + results.failedCount + \" failure\" + ((results.failedCount == 1) ? \"\" : \"s\");\r\n    message += \" in \" + ((new Date().getTime() - this.startedAt.getTime()) / 1000) + \"s\";\r\n    this.runnerMessageSpan.replaceChild(this.createDom('a', { className: 'description', href: '?' }, message), this.runnerMessageSpan.firstChild);\r\n\r\n    this.finishedAtSpan.appendChild(document.createTextNode(\"Finished at \" + new Date().toString()));\r\n};\r\n\r\njasmine.TrivialReporter.prototype.reportSuiteResults = function (suite) {\r\n    var results = suite.results();\r\n    var status = results.passed() ? 'passed' : 'failed';\r\n    if (results.totalCount === 0) { // todo: change this to check results.skipped\r\n        status = 'skipped';\r\n    }\r\n    this.suiteDivs[suite.id].className += \" \" + status;\r\n};\r\n\r\njasmine.TrivialReporter.prototype.reportSpecStarting = function (spec) {\r\n    if (this.logRunningSpecs) {\r\n        this.log('>> Jasmine Running ' + spec.suite.description + ' ' + spec.description + '...');\r\n    }\r\n};\r\n\r\njasmine.TrivialReporter.prototype.reportSpecResults = function (spec) {\r\n    var results = spec.results();\r\n    var status = results.passed() ? 'passed' : 'failed';\r\n    if (results.skipped) {\r\n        status = 'skipped';\r\n    }\r\n    var specDiv = this.createDom('div', { className: 'spec ' + status },\r\n        this.createDom('a', { className: 'run_spec', href: '?spec=' + encodeURIComponent(spec.getFullName()) }, \"run\"),\r\n        this.createDom('a', {\r\n            className: 'description',\r\n            href: '?spec=' + encodeURIComponent(spec.getFullName()),\r\n            title: spec.getFullName()\r\n        }, spec.description));\r\n\r\n\r\n    var resultItems = results.getItems();\r\n    var messagesDiv = this.createDom('div', { className: 'messages' });\r\n    for (var i = 0; i < resultItems.length; i++) {\r\n        var result = resultItems[i];\r\n\r\n        if (result.type == 'log') {\r\n            messagesDiv.appendChild(this.createDom('div', { className: 'resultMessage log' }, result.toString()));\r\n        } else if (result.type == 'expect' && result.passed && !result.passed()) {\r\n            messagesDiv.appendChild(this.createDom('div', { className: 'resultMessage fail' }, result.message));\r\n\r\n            if (result.trace.stack) {\r\n                messagesDiv.appendChild(this.createDom('div', { className: 'stackTrace' }, result.trace.stack));\r\n            }\r\n        }\r\n    }\r\n\r\n    if (messagesDiv.childNodes.length > 0) {\r\n        specDiv.appendChild(messagesDiv);\r\n    }\r\n\r\n    this.suiteDivs[spec.suite.id].appendChild(specDiv);\r\n};\r\n\r\njasmine.TrivialReporter.prototype.log = function () {\r\n    var console = jasmine.getGlobal().console;\r\n    if (console && console.log) {\r\n        if (console.log.apply) {\r\n            console.log.apply(console, arguments);\r\n        } else {\r\n            console.log(arguments); // ie fix: console.log.apply doesn't exist on ie\r\n        }\r\n    }\r\n};\r\n\r\njasmine.TrivialReporter.prototype.getLocation = function () {\r\n    return this.document.location;\r\n};\r\n\r\njasmine.TrivialReporter.prototype.specFilter = function (spec) {\r\n    var paramMap = {};\r\n    var params = this.getLocation().search.substring(1).split('&');\r\n    for (var i = 0; i < params.length; i++) {\r\n        var p = params[i].split('=');\r\n        paramMap[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);\r\n    }\r\n\r\n    if (!paramMap.spec) {\r\n        return true;\r\n    }\r\n    return spec.getFullName().indexOf(paramMap.spec) === 0;\r\n};\r\n"]],"start1":0,"start2":0,"length1":0,"length2":21342}]],"length":21342}
