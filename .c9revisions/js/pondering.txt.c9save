{"ts":1355001471879,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":["tim.hall.engr@gmail.com"],"silentsave":false,"ts":1355002186775,"patch":[[{"diffs":[[1,"Components of Engine:\n- Environment\n    Holds all of the objects and updates physics\n    (also we need to think of a better word for objects since object is a \"reserved\"\n     word and could get us in trouble)\n\n- Camera\n    Looks at the environment and draws what it sees to the canvas\n\n- \"Object\"\n    Has physics and some displayed object, but knows nothing about how it is being displayed\n\n\nFlow:\n\nenv = engine.environment\n\nobj = new engine.Object\nobj is a Body\nobj displays as a Triangle with a size relative to the environment size\n\nenv.add(obj)\n\nengine.start()\nstarts loops\n\nwithin loop, update environment\nenv.update()\nwhich in turn updates all objects\nobj.update()\nwhich in turn updates physics\nobj.\"physics\".advance()\n\n\nall of that happens whether or not any Cameras are \"watching\"\n\ncamera = new engine.Camera();\n\ncamera.canvas = fabric.Canvas(...);\n\nengine.addCamera(camera);\n\ncamera.position(...);\ncamera.zoom(...);\ncamera.other stuff;\n\nnow when engine starts, it kicks off the render loop of the camera\n\ncamera.record or start or something\nwhich calls\ncamera.render()\nwhich calls\nenv.field(camera...)\nwhich gets all of the objects in the field of view of the camera\nadd objects to camera\ncamera.canvas.add(obj)\nand then camera calls the render function for each object\nobj.render(zoom, position, etc)\ncamera.canvas.renderAll();\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1342}]],"length":1342,"saved":false}
{"ts":1355004829355,"patch":[[{"diffs":[[0," of "],[-1,"Engine"],[1,"Cosmic"],[0,":\n- "]],"start1":10,"start2":10,"length1":14,"length2":14},{"diffs":[[0,"vas\n\n- \""],[-1,"Object"],[1,"Matter"],[0,"\"\n    Ha"]],"start1":281,"start2":281,"length1":22,"length2":22},{"diffs":[[0,"\n\nenv = "],[-1,"engine"],[1,"cosmic"],[0,".environ"]],"start1":397,"start2":397,"length1":22,"length2":22},{"diffs":[[0,"new "],[-1,"engine.Object"],[1,"cosmic.Matter"],[0,"\nobj"]],"start1":431,"start2":431,"length1":21,"length2":21},{"diffs":[[0,"ching\"\n\n"],[1,"cosmic."],[0,"camera ="]],"start1":782,"start2":782,"length1":16,"length2":23},{"diffs":[[0,"new "],[-1,"engine.Camera();\n\ncamera.canvas ="],[1,"FabricCamera(stuff passed into"],[0," fabric"],[-1,".C"],[1," c"],[0,"anvas"],[-1,"("],[0,"...)"],[-1,";"],[0,"\n\n"],[-1,"engine.addCamera(camera);\n\n"],[1,"(FabricCamera implements ICamera interface)\n\ncosmic."],[0,"came"]],"start1":806,"start2":806,"length1":90,"length2":110},{"diffs":[[0,"ition(...);\n"],[1,"cosmic."],[0,"camera.zoom("]],"start1":922,"start2":922,"length1":24,"length2":31},{"diffs":[[0,".);\n"],[-1,"camera.other stuff;\n\nnow when engine starts, it kicks off the render loop of the camera\n\ncamera.record or start or something\nwhich calls\n"],[1,"\nnow engine render loop is called with respect to (w.r.t.) camera position and zoom\n\ncosmic."],[0,"came"]],"start1":955,"start2":955,"length1":145,"length2":100},{"diffs":[[0,".render("],[1,"..."],[0,")\nwhich "]],"start1":1057,"start2":1057,"length1":16,"length2":19},{"diffs":[[0,"lls\n"],[-1,"env.field(camera...)\nwhich gets all of the objects in the field of view of the camera\nadd objects to camera\ncamera.canvas.add(obj)\nand then camera calls the render function for each object\nobj.render(zoom, position, etc)\ncamera.canvas.renderAll();\n\n"],[1,"obj.draw(offset)\nnot quite sure how to zoom...."],[0,"\n\n\n"]],"start1":1078,"start2":1078,"length1":256,"length2":54}]],"length":1132,"saved":false}
{"ts":1355006330917,"patch":[[{"diffs":[[0,"w(offset"],[1,", scale"],[0,")\nnot qu"]],"start1":1089,"start2":1089,"length1":16,"length2":23},{"diffs":[[0,"m....\n\n\n"],[1,"1000 x 1000 environment\n\n200 x 200 canvas at 100, 100 relative to the environment at zoom of 2\n\ndraw point at 150, 150 \n(should be at 50, 50 on canvas at normal zoom)\n(and 100, 100 at 2x zoom)\n\nScale up environment x 2\n2000 x 2000\nScale up offset x 2\n200, 200\nKeep canvas size fixed\n200 x 200\n\npoint at 150, 150\n-> 300, 300\nafter offset\n100, 100\n\n(Matter.js...)\nupdate(timestep) {\n    physics...\n}\ndraw(offset, zoom) {\n    zoom the actual object / svg / etc\n\n    x = (x - offset) * zoom\n    y = (y - offset) * zoom\n}\n\n\n\n\n"]],"start1":1131,"start2":1131,"length1":8,"length2":529}]],"length":1660,"saved":false}
{"contributors":["tim.hall.engr@gmail.com"],"silentsave":false,"ts":1355007961278,"patch":[[{"diffs":[[0,"env."],[-1,"add"],[1,"push"],[0,"(obj"]],"start1":536,"start2":536,"length1":11,"length2":12}]],"length":1661,"saved":false}
{"ts":1355007970033,"patch":[[{"diffs":[[0,"env."],[-1,"push"],[1,"add"],[0,"(obj"]],"start1":536,"start2":536,"length1":12,"length2":11}]],"length":1660,"saved":false}
{"ts":1355018667443,"patch":[[{"diffs":[[0,"w:\n\n"],[-1,"env = cosmic.environment\n\nobj = new cosmic.Matter\nobj is a Body\nobj displays as a Triangle with a size relative to the environment size\n\nenv.add(obj)\n\nengine"],[1,"var ship = new cosmic.Matter;\ncosmic.environment.add(ship);\ncosmic"],[0,".start()"],[-1,"\ns"],[1,";\n\n// S"],[0,"tart"]],"start1":395,"start2":395,"length1":175,"length2":89},{"diffs":[[0,"loop"],[-1,"s\n\nwithin loop, update environment\nenv.update()\nwhich in turn updates all objects\nobj.update()\nwhich in turn updates physics\nobj.\"physics\".advance()\n\n\nall of that happens whether or not any Cameras are \"watching\"\n\ncosmic.camera = new FabricCamera(stuff passed into fabric canvas...)\n\n(FabricCamera implements ICamera interface)\n\ncosmic.camera.position(...);\ncosmic.camera.zoom(...);\n\nnow engine render l"],[1,"\nenvironment.advance(timestep);\n\n// Which calls\nship.advance(timestamp)\n\nvar camera = new FabricCamera();\n\ncosmic.camera = camera;\ncamera.position(x, y);\ncamera.scale(1.5);\n\n// L"],[0,"oop "],[-1,"is "],[0,"call"],[-1,"ed with respect to (w.r.t.) camera position and zoom\n\ncosmic.camera.render(...)\nwhich calls\nobj.draw(offset, scale)\nnot quite sure how to zoom....\n\n\n1000 x 1000 environment\n\n200 x 200 canvas at 100, 100 relative to the environment at zoom of 2\n\ndraw point at 150, 150 \n(should be at 50, 50 on canvas at normal zoom)\n(and 100, 100 at 2x zoom)\n\nScale up environment x 2\n2000 x 2000\nScale up offset x 2\n200, 200\nKeep canvas size fixed\n200 x 200\n\npoint at 150, 150\n-> 300, 300\nafter offset\n100, 100\n\n(Matter.js...)\nupdate(timestep) {\n    physics...\n}\ndraw(offset, zoom) {\n    zoom the actual object / svg / etc\n\n    x = (x - offset) * zoom\n    y = (y - offset) * zoom\n}\n\n\n\n"],[1,"s\ncamera.draw();\n\n// which calls\nship.draw(offset, scale);"],[0,"\n"]],"start1":486,"start2":486,"length1":1088,"length2":249}]],"length":735,"saved":false}
