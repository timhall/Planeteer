{"ts":1355022046571,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":["rchall@args.us"],"silentsave":false,"ts":1355024375088,"patch":[[{"diffs":[[1,"define(\nfunction () {\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n});"]],"start1":0,"start2":0,"length1":0,"length2":105}]],"length":105,"saved":false}
{"contributors":[],"silentsave":false,"ts":1355275826074,"patch":[[{"diffs":[[0,"define(\n"],[1,"[],\n"],[0,"function"]],"start1":0,"start2":0,"length1":16,"length2":20}]],"length":109,"saved":false}
{"contributors":["tim.hall.engr@gmail.com","rchall@args.us"],"silentsave":false,"ts":1355281908804,"patch":[[{"diffs":[[-1,"define(\n["],[1,"/**\n * Matter in the universe with physics and display\n */\n\ndefine(\n['freebody/Body', 'freebody/utils'"],[0,"],\nf"]],"start1":0,"start2":0,"length1":13,"length2":106},{"diffs":[[0,"nction ("],[1,"Body, utils"],[0,") {\n    "]],"start1":107,"start2":107,"length1":16,"length2":27},{"diffs":[[0," {\n    \n    "],[-1,"\n    "],[1,"var Matter = function () {\n        var matter = this;"],[0,"\n    "],[-1,"\n"],[0,"    \n    \n  "]],"start1":127,"start2":127,"length1":35,"length2":82},{"diffs":[[0,"s;\n        \n    "],[-1,"\n"],[0,"    \n    \n    \n "]],"start1":190,"start2":190,"length1":33,"length2":32},{"diffs":[[0,"  \n        \n    "],[-1,"\n"],[0,"    \n    \n    \n "]],"start1":199,"start2":199,"length1":33,"length2":32},{"diffs":[[0,"  \n        \n    "],[-1,"\n    "],[1,"    return matter;\n    };"],[0,"\n    \n    \n    \n"]],"start1":208,"start2":208,"length1":37,"length2":57},{"diffs":[[0,"   \n    "],[-1,"\n    "],[1,"return Matter;"],[0,"\n});"]],"start1":261,"start2":261,"length1":17,"length2":26}]],"length":287,"saved":false}
{"contributors":[],"silentsave":false,"ts":1356307560717,"patch":[[{"diffs":[[0,"/**"],[1,"\r"],[0,"\n * Matt"]],"start1":0,"start2":0,"length1":11,"length2":12},{"diffs":[[0,"play"],[1,"\r"],[0,"\n */"],[-1,"\n"],[1,"\r\n\r"],[0,"\ndefine("],[1,"\r"],[0,"\n['f"]],"start1":51,"start2":51,"length1":21,"length2":25},{"diffs":[[0,"', '"],[-1,"freebody/utils"],[1,"underscore"],[0,"'],"],[1,"\r"],[0,"\nfun"]],"start1":88,"start2":88,"length1":25,"length2":22},{"diffs":[[0,"dy, "],[-1,"utils"],[1,"_"],[0,") {"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n   "]],"start1":119,"start2":119,"length1":21,"length2":19},{"diffs":[[0,"nction ("],[1,"options"],[0,") {"],[1,"\r"],[0,"\n       "]],"start1":154,"start2":154,"length1":19,"length2":27},{"diffs":[[0," = this;"],[1,"\r"],[0,"\n       "]],"start1":192,"start2":192,"length1":16,"length2":17},{"diffs":[[0," this;\r\n        "],[1,"\r"],[0,"\n        \n      "]],"start1":194,"start2":194,"length1":32,"length2":33},{"diffs":[[0,"        "],[-1,"\n        "],[1,"// Inherit instance properties from Body\r\n        // (Call Body constructor, using matter as \"this\" and passing in options)\r\n        Body.call(matter, options);\r\n        \r\n        // Create display object\r\n        if (_.isFunction(matter.create)) {\r\n            matter.create();            \r\n        }\r\n        \r"],[0,"\n       "]],"start1":212,"start2":212,"length1":25,"length2":328},{"diffs":[[0,"ter;"],[1,"\r"],[0,"\n    };"],[1,"\r"],[0,"\n    "],[1,"\r"],[0,"\n    "],[-1,"\n    "],[1,"// Inherit prototype properties from Body\r\n    _.extend(Matter.prototype, Body.prototype);\r\n    \r\n    \r\n    \r"],[0,"\n   "]],"start1":551,"start2":551,"length1":30,"length2":137},{"diffs":[[0," Matter;"],[1,"\r"],[0,"\n});"]],"start1":695,"start2":695,"length1":12,"length2":13}]],"length":708,"saved":false}
{"contributors":[],"silentsave":false,"ts":1356657734103,"patch":[[{"diffs":[[0,"r.create"],[-1,"("],[1,".call(matter"],[0,");      "]],"start1":487,"start2":487,"length1":17,"length2":28}]],"length":719,"saved":false}
{"contributors":[],"silentsave":false,"ts":1356808948124,"patch":[[{"diffs":[[0,"erscore'"],[1,", 'backbone'"],[0,"],\r\nfunc"]],"start1":95,"start2":95,"length1":16,"length2":28},{"diffs":[[0,"(Body, _"],[1,", Backbone"],[0,") {\r\n   "]],"start1":128,"start2":128,"length1":16,"length2":26},{"diffs":[[0,"totype, "],[1,"\r\n        "],[0,"Body.pro"]],"start1":674,"start2":674,"length1":16,"length2":26},{"diffs":[[0,"type"],[-1,");"],[1,","],[0,"\r\n    "],[1,"    Backbone.Events"],[0,"\r\n    "],[1,");"],[0,"\r\n  "]],"start1":702,"start2":702,"length1":22,"length2":42}]],"length":771,"saved":false}
{"ts":1356808978898,"patch":[[{"diffs":[[0,"  };\r\n    \r\n"],[1,"    /**\r\n     * @prototype\r\n     */\r\n    _.extend(Matter.prototype, \r\n    "],[0,"    // Inher"]],"start1":592,"start2":592,"length1":24,"length2":98},{"diffs":[[0,"m Body\r\n    "],[-1,"_.extend(Matter"],[1,"    Body"],[0,".prototype, "]],"start1":717,"start2":717,"length1":39,"length2":32},{"diffs":[[0," Body.prototype,"],[1,"\r\n       "],[0," \r\n        Body."]],"start1":732,"start2":732,"length1":32,"length2":41},{"diffs":[[0,"  \r\n        "],[-1,"Body.prototype,"],[1,"// Add Events (from Backbone)"],[0,"\r\n        Ba"]],"start1":756,"start2":756,"length1":39,"length2":53}]],"length":861,"saved":false}
{"ts":1356809008199,"patch":[[{"diffs":[[0,"e) {\r\n    \r\n"],[1,"    /**\r\n     * Matter\r\n     * \r\n     * @param {Object} [options]\r\n     * @class\r\n     */\r\n"],[0,"    var Matt"]],"start1":145,"start2":145,"length1":24,"length2":115}]],"length":952,"saved":false}
{"ts":1356809957881,"patch":[[{"diffs":[[0,"e.Events"],[1,",\r\n        \r\n        {\r\n            \r\n            collision: function (obj) {\r\n                \r\n            },\r\n            \r\n            collide: function (obj) {\r\n                \r\n            }\r\n            \r\n        }"],[0,"\r\n    );"]],"start1":905,"start2":905,"length1":16,"length2":238}]],"length":1174,"saved":false}
{"ts":1356810036237,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n            collision: function (obj) {\r\n                \r\n            },\r\n            "],[1,"/**\r\n             * Check for collision (and apply if found)\r\n             *\r\n             * @param {Matter} obj to check\r\n             * @prototype\r\n             */\r\n            collision: function (obj) {\r\n                \r\n            },\r\n            \r\n            /**\r\n             * Apply collision with object\r\n             * \r\n             * @param {Matter} obj that was collided with\r\n             * @prototype\r\n             */"],[0,"\r\n  "]],"start1":945,"start2":945,"length1":97,"length2":443},{"diffs":[[0,"                "],[1," "],[0,"\r\n            }\r"]],"start1":1425,"start2":1425,"length1":32,"length2":33}]],"length":1521,"saved":false}
{"ts":1356810101892,"patch":[[{"diffs":[[0,"                "],[1,"// Step 1: Check center distance against radius\r\n                \r\n                // Step 2: Check points within bounding box\r\n                \r\n                // Step 3: Check points within triangular area"],[0,"\r\n            },"]],"start1":1157,"start2":1157,"length1":32,"length2":240}]],"length":1729,"saved":false}
{"ts":1356810144650,"patch":[[{"diffs":[[0,"nction (obj) {\r\n"],[1,"                var matter = this;\r\n                \r\n"],[0,"                "]],"start1":1141,"start2":1141,"length1":32,"length2":86},{"diffs":[[0,"ction (obj) {\r\n "],[1,"               var matter = this;\r\n                \r\n"],[0,"                "]],"start1":1672,"start2":1672,"length1":32,"length2":85}]],"length":1836,"saved":false}
{"ts":1356810185953,"patch":[[{"diffs":[[0,"                "],[1,"console.log('Collision!');"],[0,"\r\n            }\r"]],"start1":1741,"start2":1741,"length1":32,"length2":58}]],"length":1862,"saved":false}
{"ts":1356810196551,"patch":[[{"diffs":[[0,"lision!'"],[1,", matter"],[0,");\r\n    "]],"start1":1773,"start2":1773,"length1":16,"length2":24}]],"length":1870,"saved":false}
{"ts":1356810307135,"patch":[[{"diffs":[[0,"                "],[-1,"\r\n"],[1,"var centerDistance = 0,\r\n                    collisionDistance = matter.radius + obj.radius;\r\n                if (centerDistance <= collisionDistance) {\r\n    "],[0,"                "]],"start1":1276,"start2":1276,"length1":34,"length2":190},{"diffs":[[0,"                "],[1,"    "],[0,"\r\n              "]],"start1":1511,"start2":1511,"length1":32,"length2":36},{"diffs":[[0,"                "],[1," "],[1,"   "],[0,"// Step 3: Check"]],"start1":1533,"start2":1533,"length1":32,"length2":36},{"diffs":[[0,"r area\r\n"],[1,"                }\r\n"],[0,"        "]],"start1":1593,"start2":1593,"length1":16,"length2":35}]],"length":2053,"saved":false}
{"ts":1356810337046,"patch":[[{"diffs":[[0,"bj.radius;\r\n"],[1,"                \r\n"],[0,"            "]],"start1":1374,"start2":1374,"length1":24,"length2":42}]],"length":2071,"saved":false}
{"ts":1356810373144,"patch":[[{"diffs":[[0,"r area\r\n"],[1,"                    \r\n                    // Trigger collision\r\n                    matter.collide(obj);\r\n                    obj.collide(matter);\r\n"],[0,"        "]],"start1":1611,"start2":1611,"length1":16,"length2":164}]],"length":2219,"saved":false}
{"ts":1356810388200,"patch":[[{"diffs":[[0," // "],[-1,"T"],[1,"If collision tests pass, t"],[0,"rigg"]],"start1":1660,"start2":1660,"length1":9,"length2":34}]],"length":2244,"saved":false}
{"ts":1356811024619,"patch":[[{"diffs":[[0,"        "],[-1,"var "],[1,"if (matter._"],[0,"centerDi"]],"start1":1284,"start2":1284,"length1":20,"length2":28},{"diffs":[[0,"ance"],[-1," = 0,\r\n                    collisionDistance = matter.radius + obj.radius;\r\n                \r\n                if (centerDistance <= collisionDistance"],[1,"Collision(matter, obj)"],[0,") {\r"]],"start1":1314,"start2":1314,"length1":157,"length2":30},{"diffs":[[0,"on!', matter);\r\n"],[1,"            },\r\n            \r\n            _centerDistanceCollision: function (obj) {\r\n                var centerDistance = 0,\r\n                    collisionDistance = this.radius + obj.radius;\r\n                    \r\n                return centerDistance <= collisionDistance;\r\n"],[0,"            }\r\n "]],"start1":2032,"start2":2032,"length1":32,"length2":309}]],"length":2402,"saved":false}
{"ts":1356811101509,"patch":[[{"diffs":[[0," = this."],[1,"bounding."],[0,"radius +"]],"start1":2212,"start2":2212,"length1":16,"length2":25},{"diffs":[[0,"s + obj."],[1,"bounding."],[0,"radius;\r"]],"start1":2234,"start2":2234,"length1":16,"length2":25}]],"length":2420,"saved":false}
{"ts":1356811412755,"patch":[[{"diffs":[[0,"           /**\r\n"],[1,"             * bounding prototype property for object\r\n             */\r\n            bounding: {\r\n                radius: 0\r\n            },\r\n            \r\n            /**\r\n"],[0,"             * C"]],"start1":938,"start2":938,"length1":32,"length2":203}]],"length":2591,"saved":false}
{"ts":1356811455831,"patch":[[{"diffs":[[0,"body"],[-1,"/Body"],[0,"', '"]],"start1":79,"start2":79,"length1":13,"length2":8},{"diffs":[[0,"nction ("],[-1,"B"],[1,"freeb"],[0,"ody, _, "]],"start1":116,"start2":116,"length1":17,"length2":21},{"diffs":[[0,"s)\r\n        "],[1,"freebody."],[0,"Body.call(ma"]],"start1":453,"start2":453,"length1":24,"length2":33},{"diffs":[[0,"tance = "],[-1,"0"],[0,",\r\n     "]],"start1":2342,"start2":2342,"length1":17,"length2":16}]],"length":2598,"saved":false}
{"ts":1356811489973,"patch":[[{"diffs":[[0,"tance = "],[1,"freebody.utils.distance(this, obj)"],[0,",\r\n     "]],"start1":2342,"start2":2342,"length1":16,"length2":50}]],"length":2632,"saved":false}
{"ts":1356811602112,"patch":[[{"diffs":[[0,"        "],[1,"freebody."],[0,"Body.pro"]],"start1":824,"start2":824,"length1":16,"length2":25}]],"length":2641,"saved":false}
{"ts":1356812270168,"patch":[[{"diffs":[[0,"        "],[1,"_"],[0,"bounding"]],"start1":1047,"start2":1047,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"radius: 0"],[1,"circle: {\r\n                    radius: 0,\r\n                    center: {\r\n                        x: 0,\r\n                        y: 0\r\n                    }\r\n                }"],[0,"\r\n  "]],"start1":1081,"start2":1081,"length1":17,"length2":183},{"diffs":[[0,"r, obj)) {\r\n"],[1,"                    \r\n"],[0,"            "]],"start1":1688,"start2":1688,"length1":24,"length2":46},{"diffs":[[0,"              \r\n"],[1,"                    \r\n"],[0,"                "]],"start1":1793,"start2":1793,"length1":32,"length2":54}]],"length":2852,"saved":false}
{"ts":1356812344487,"patch":[[{"diffs":[[0,"nce(this"],[-1,", obj"],[1,"._bounding.circle.center, obj._bounding.circle.center"],[0,"),\r\n    "]],"start1":2590,"start2":2590,"length1":21,"length2":69},{"diffs":[[0,"is.bounding."],[1,"circle."],[0,"radius + obj"]],"start1":2697,"start2":2697,"length1":24,"length2":31},{"diffs":[[0,"ounding."],[1,"circle."],[0,"radius;\r"]],"start1":2730,"start2":2730,"length1":16,"length2":23}]],"length":2914,"saved":false}
{"ts":1356812461612,"patch":[[{"diffs":[[0," = this."],[1,"_"],[0,"bounding"]],"start1":2692,"start2":2692,"length1":16,"length2":17},{"diffs":[[0,"s + obj."],[1,"_"],[0,"bounding"]],"start1":2722,"start2":2722,"length1":16,"length2":17}]],"length":2916,"saved":false}
{"ts":1356812728712,"patch":[[{"diffs":[[0,"                "],[1,"console.log(centerDistance, collisionDistance);"],[0,"\r\n              "]],"start1":2760,"start2":2760,"length1":32,"length2":79}]],"length":2963,"saved":false}
{"ts":1356812770141,"patch":[[{"diffs":[[0,"Distance"],[1,", this._bounding.circle.center, obj._bounding.circle.center"],[0,");\r\n    "]],"start1":2813,"start2":2813,"length1":16,"length2":75}]],"length":3022,"saved":false}
{"ts":1356812846989,"patch":[[{"diffs":[[0,"his;\r\n        \r\n"],[1,"        matter._bounding: {\r\n                circle: {\r\n                    radius: 0,\r\n                    center: {\r\n                        x: 0,\r\n                        y: 0\r\n                    }\r\n                }\r\n            },\r\n     \r\n"],[0,"        // Inher"]],"start1":308,"start2":308,"length1":32,"length2":277},{"diffs":[[0,"    "],[-1,"_bounding: {\r\n                circle: {\r\n                    radius: 0,\r\n                    center: {\r\n                        x: 0,\r\n                        y: 0\r\n                    }\r\n                }\r\n            },"],[0,"\r\n  "]],"start1":1296,"start2":1296,"length1":229,"length2":8}]],"length":3046,"saved":false}
{"ts":1356812870497,"patch":[[{"diffs":[[0,"bounding"],[-1,":"],[1," ="],[0," {\r\n    "]],"start1":340,"start2":340,"length1":17,"length2":18}]],"length":3047,"saved":false}
{"ts":1356812887095,"patch":[[{"diffs":[[0,"s;\r\n"],[-1,"                    console.log(centerDistance, collisionDistance, this._bounding.circle.center, obj._bounding.circle.center);\r\n"],[0,"    "]],"start1":2777,"start2":2777,"length1":136,"length2":8}]],"length":2919,"saved":false}
{"ts":1356813100547,"patch":[[{"diffs":[[0,"        "],[-1,"    "],[0,"circle: "]],"start1":358,"start2":358,"length1":20,"length2":16},{"diffs":[[0," circle: {\r\n"],[-1,"    "],[0,"            "]],"start1":365,"start2":365,"length1":28,"length2":24},{"diffs":[[0,"        "],[-1,"  "],[-1,"  "],[0,"center: "]],"start1":413,"start2":413,"length1":20,"length2":16},{"diffs":[[0,"        "],[-1,"    "],[0,"x: 0,\r\n "]],"start1":444,"start2":444,"length1":20,"length2":16},{"diffs":[[0," x: 0,\r\n        "],[1,"            y: 0\r\n                }\r\n            },\r\n            rectangle: {\r\n"],[0,"                "]],"start1":451,"start2":451,"length1":32,"length2":111},{"diffs":[[0,"                "],[-1,"y"],[1,"width"],[0,": 0"],[1,","],[0,"\r\n              "]],"start1":546,"start2":546,"length1":36,"length2":41},{"diffs":[[0,"                "],[-1,"    }"],[1,"height: 0,\r\n                offsetLength: 0,"],[0,"\r\n              "]],"start1":573,"start2":573,"length1":37,"length2":76},{"diffs":[[0,"                "],[-1,"}"],[1,"theta: 0"],[0,"\r\n            },"]],"start1":635,"start2":635,"length1":33,"length2":40},{"diffs":[[0,"           }"],[-1,","],[1,"\r\n        };"],[0,"\r\n     \r\n   "]],"start1":662,"start2":662,"length1":25,"length2":36},{"diffs":[[0," {\r\n"],[-1,"            /**\r\n             * bounding prototype property for object\r\n             */\r\n            \r\n"],[0,"    "]],"start1":1321,"start2":1321,"length1":111,"length2":8}]],"length":2941,"saved":false}
{"ts":1356813700129,"patch":[[{"diffs":[[0,"    "],[-1,"circle: {\r\n                radius: 0,\r\n                center: {\r\n                    x: 0,\r\n                    y: 0\r\n                }\r\n            }"],[1,"radius: 0"],[0,",\r\n "]],"start1":362,"start2":362,"length1":159,"length2":17},{"diffs":[[0,"tance;\r\n"],[1,"            },\r\n            \r\n            /**\r\n             * Getter/Setter for the bounding box\r\n             */\r\n            boundingBox: function (width, height, offsetLength, theta) {\r\n                if (_.isUndefined(width)) {\r\n                    \r\n                    \r\n                } else {\r\n                    // Setter\r\n                    // TODO: set radius and center\r\n                    \r\n                    this._bounding.rectangle = {\r\n                        width: width,\r\n                        height: height,\r\n                        offsetLength: offsetLength,\r\n                        theta: theta\r\n                    }\r\n                    \r\n                    \r\n                    \r\n                }            \r\n"],[0,"        "]],"start1":2714,"start2":2714,"length1":16,"length2":766}]],"length":3549,"saved":false}
{"ts":1356813739647,"patch":[[{"diffs":[[0,"this"],[-1,"._bounding.circle.center, obj._bounding.circle.center"],[1,", obj"],[0,"),\r\n"]],"start1":2499,"start2":2499,"length1":61,"length2":13},{"diffs":[[0,"s._bounding."],[-1,"circle."],[0,"radius + obj"]],"start1":2555,"start2":2555,"length1":31,"length2":24},{"diffs":[[0,"ing."],[-1,"circle."],[0,"radi"]],"start1":2586,"start2":2586,"length1":15,"length2":8}]],"length":3487,"saved":false}
{"ts":1356813948303,"patch":[[{"diffs":[[0,"set "],[-1,"radius and center"],[1,"bounding radius"],[0,"\r\n  "]],"start1":3024,"start2":3024,"length1":25,"length2":23},{"diffs":[[0," }\r\n"],[-1,"                    \r\n                    \r\n                    \r\n"],[0,"    "]],"start1":3307,"start2":3307,"length1":74,"length2":8}]],"length":3419,"saved":false}
{"ts":1356814014501,"patch":[[{"diffs":[[0,"        "],[-1,"rectangle"],[1,"box"],[0,": {\r\n   "]],"start1":382,"start2":382,"length1":25,"length2":19},{"diffs":[[0,"                "],[1,"// Getter\r\n                    // TODO: Define format for rectangle (points, length/width, etc)"],[0,"\r\n              "]],"start1":2892,"start2":2892,"length1":32,"length2":127},{"diffs":[[0,"              \r\n"],[1,"                    // Store bounding box info\r\n"],[0,"                "]],"start1":3140,"start2":3140,"length1":32,"length2":80},{"diffs":[[0,"ounding."],[-1,"rectangle"],[1,"box"],[0," = {\r\n  "]],"start1":3231,"start2":3231,"length1":25,"length2":19}]],"length":3550,"saved":false}
{"ts":1356814060677,"patch":[[{"diffs":[[0,"his;\r\n        \r\n"],[1,"        // Instance properties\r\n"],[0,"        matter._"]],"start1":308,"start2":308,"length1":32,"length2":64}]],"length":3582,"saved":false}
{"ts":1356814083547,"patch":[[{"diffs":[[0,"erties\r\n"],[1,"        matter.angle = 0;\r\n"],[0,"        "]],"start1":348,"start2":348,"length1":16,"length2":43}]],"length":3609,"saved":false}
{"ts":1356814170309,"patch":[[{"diffs":[[0,"                "],[1,"var box = this._bounding.box,\r\n                        angle = box.theta + this.angle;"],[0,"\r\n              "]],"start1":3068,"start2":3068,"length1":32,"length2":118}]],"length":3695,"saved":false}
{"ts":1356814577968,"patch":[[{"diffs":[[0,", theta) {\r\n"],[1,"                var relativePoint = function (initialPoint, angle, distance) {\r\n                    return { x: 0, y: 0 };  \r\n                };\r\n                \r\n"],[0,"            "]],"start1":2890,"start2":2890,"length1":24,"length2":188},{"diffs":[[0,"is.angle"],[1,",\r\n                        points = [],\r\n                        middlePoint;\r\n                    \r\n                    middlePoint = relativePoint(this, angle, box.offsetLength);\r\n                    points[0] = relativePoint(middlePoint, angle - 90, box.width / 2);\r\n                    points[3] = relativePoint(middlePoint, angle + 90, box.width / 2);\r\n                    \r\n                    points[1] = relativePoint(points[0], -angle, box.height);\r\n                    points[2] = relativePoint(points[3], -angle, box.height)"],[0,";\r\n     "]],"start1":3325,"start2":3325,"length1":16,"length2":551}]],"length":4394,"saved":false}
{"ts":1356814585959,"patch":[[{"diffs":[[0,", box.height);\r\n"],[1,"                    \r\n                    return points;\r\n"],[0,"                "]],"start1":3855,"start2":3855,"length1":32,"length2":90}]],"length":4452,"saved":false}
{"ts":1356814680866,"patch":[[{"diffs":[[0,"n { "],[-1,"x: 0, y: 0"],[1,"\r\n                        x: initialPoint.x + distance * Math.cos(freebody.utils.radians(angle)), \r\n                        y: initialPoint.y + distance * Math.sin(freebody.utils.radians(angle))\r\n                   "],[0," }; "]],"start1":3007,"start2":3007,"length1":18,"length2":223}]],"length":4657,"saved":false}
{"ts":1356814937750,"patch":[[{"diffs":[[0,", theta) {\r\n"],[1,"                var matter = this;\r\n                \r\n                // Find point relative to initial point that is set distance and angle away\r\n"],[0,"            "]],"start1":2890,"start2":2890,"length1":24,"length2":171},{"diffs":[[0,"istance) {\r\n"],[-1,""],[0,"            "]],"start1":3117,"start2":3117,"length1":24,"length2":24},{"diffs":[[0,"    "],[-1,"if (_.isUndefined(width)) {\r\n                    // Getter\r\n                    // TODO: Define format for rectangle (points, length/width, etc)\r\n                    var box = this._bounding.box,\r\n                       "],[1,"var findPoints(box) {\r\n                    var"],[0," ang"]],"start1":3430,"start2":3430,"length1":228,"length2":54},{"diffs":[[0,"theta + "],[-1,"this"],[1,"matter"],[0,".angle,\r"]],"start1":3493,"start2":3493,"length1":20,"length2":22},{"diffs":[[0,"vePoint("],[-1,"this"],[1,"matter"],[0,", angle,"]],"start1":3654,"start2":3654,"length1":20,"length2":22},{"diffs":[[0,"              \r\n"],[-1,""],[0,"                "]],"start1":4059,"start2":4059,"length1":32,"length2":32},{"diffs":[[0,"rn points;\r\n"],[1,"                };\r\n                \r\n                // If width is defined, assume setter, otherwise getter\r\n                if (_.isUndefined(width)) {\r\n                    // Getter\r\n                    return findPoints(matter._bounding.box)\r\n"],[0,"            "]],"start1":4099,"start2":4099,"length1":24,"length2":272}]],"length":4882,"saved":false}
{"ts":1356814951203,"patch":[[{"diffs":[[0,"ndPoints"],[1," = function "],[0,"(box) {\r"]],"start1":3440,"start2":3440,"length1":16,"length2":28}]],"length":4894,"saved":false}
{"ts":1356815001092,"patch":[[{"diffs":[[0,"              \r\n"],[1,"                var saveBox = function () {\r\n                    matter._bounding.box = {\r\n                        width: width,\r\n                        height: height,\r\n                        offsetLength: offsetLength,\r\n                        theta: theta\r\n                    }\r\n                }\r\n                \r\n"],[0,"                "]],"start1":4145,"start2":4145,"length1":32,"length2":354},{"diffs":[[0,"    "],[-1,"this._bounding.box = {\r\n                        width: width,\r\n                        height: height,\r\n                        offsetLength: offsetLength,\r\n                        theta: theta\r\n                    }"],[1,"saveBox();"],[0,"\r\n  "]],"start1":4886,"start2":4886,"length1":224,"length2":18}]],"length":5010,"saved":false}
{"ts":1356815234937,"patch":[[{"diffs":[[0,"nts[0], "],[-1,"-"],[0,"angle"],[1," - 180"],[0,", box.he"]],"start1":3956,"start2":3956,"length1":22,"length2":27},{"diffs":[[0,"3], "],[-1,"-"],[0,"angle"],[1," - 180"],[0,", bo"]],"start1":4044,"start2":4044,"length1":14,"length2":19}]],"length":5020,"saved":false}
{"ts":1356816225052,"patch":[[{"diffs":[[0,"nction ("],[-1,"box"],[0,") {\r\n   "]],"start1":3453,"start2":3453,"length1":19,"length2":16},{"diffs":[[0,"    var "],[1,"box = matter._bounding.box,\r\n                        "],[0,"angle = "]],"start1":3482,"start2":3482,"length1":16,"length2":69},{"diffs":[[0,"              \r\n"],[1,"                var setRadius = function() {\r\n                    var points = findPoints();\r\n                    var maxDistance = 0;\r\n                    for (var i = 0; i < points.length; i += 1) {\r\n                        var distance = freebody.utils.distance(points[i], matter);\r\n                        if (distance > maxDistance) {\r\n                            maxDistance = distance;\r\n                        }\r\n                    }\r\n                    \r\n                    matter._bounding.radius = maxDistance;\r\n                }\r\n                \r\n"],[0,"                "]],"start1":4527,"start2":4527,"length1":32,"length2":595},{"diffs":[[0,"ise getter\r\n"],[-1,""],[0,"            "]],"start1":5167,"start2":5167,"length1":24,"length2":24},{"diffs":[[0,"nts("],[-1,"matter._bounding.box)"],[1,")\r\n                    "],[0,"\r\n  "]],"start1":5289,"start2":5289,"length1":29,"length2":31},{"diffs":[[0,"ounding radius\r\n"],[-1,""],[0,"                "]],"start1":5409,"start2":5409,"length1":32,"length2":32},{"diffs":[[0,"                "],[1,"setRadius();"],[0,"\r\n              "]],"start1":5429,"start2":5429,"length1":32,"length2":44}]],"length":5647,"saved":false}
{"ts":1356816265512,"patch":[[{"diffs":[[0,"    "],[-1,"setRadius();"],[0,"\r\n  "]],"start1":5441,"start2":5441,"length1":20,"length2":8},{"diffs":[[0,"saveBox();\r\n"],[1,"                    setRadius();\r\n"],[0,"            "]],"start1":5515,"start2":5515,"length1":24,"length2":58}]],"length":5669,"saved":false}
{"ts":1356816389226,"patch":[[{"diffs":[[0,"s[i], matter);\r\n"],[1,"                        console.log(distance, maxDistance);\r\n"],[0,"                "]],"start1":4813,"start2":4813,"length1":32,"length2":93}]],"length":5730,"saved":false}
{"ts":1356816444085,"patch":[[{"diffs":[[0,"Distance"],[1,", points[i]"],[0,");\r\n    "]],"start1":4878,"start2":4878,"length1":16,"length2":27}]],"length":5741,"saved":false}
{"ts":1356816849574,"patch":[[{"diffs":[[0,"ng.radius;\r\n"],[1,"                \r\n"],[0,"            "]],"start1":2640,"start2":2640,"length1":24,"length2":42},{"diffs":[[0,"\r\n            \r\n"],[1,"            _boundingBoxCollision: function (obj) {\r\n                var objPoints = obj.boundingBox(),\r\n                    matter = this;\r\n                \r\n                var pointIsInsideBox = function (point) {\r\n                    // ...\r\n                }\r\n                \r\n                return !!_.find(objPoints, function (point) {\r\n                    return pointIsInsideBox(point)\r\n                });\r\n            }\r\n            \r\n"],[0,"            /**\r"]],"start1":2745,"start2":2745,"length1":32,"length2":480},{"diffs":[[0,");\r\n"],[-1,"                        console.log(distance, maxDistance, points[i]);\r\n"],[0,"    "]],"start1":5291,"start2":5291,"length1":80,"length2":8}]],"length":6135,"saved":false}
{"ts":1356817761424,"patch":[[{"diffs":[[0,"    "],[-1,"// ..."],[1,"var distance = freebody.utils.distance(point, matter);\r\n                    var angle = freebody.utils.angle(matter, point);"],[0,"\r\n  "]],"start1":2995,"start2":2995,"length1":14,"length2":132},{"diffs":[[0,";\r\n            }"],[1,","],[0,"\r\n            \r\n"]],"start1":3295,"start2":3295,"length1":32,"length2":33}]],"length":6254,"saved":false}
{"ts":1356818284864,"patch":[[{"diffs":[[0,", point)"],[-1,";"],[1," - (matter._bounding.box.theta + matter.angle);\r\n                    \r\n                    \r\n                    "],[0,"\r\n      "]],"start1":3114,"start2":3114,"length1":17,"length2":129}]],"length":6366,"saved":false}
{"ts":1356818858320,"patch":[[{"diffs":[[0,"    "],[-1," // Find point relative to initial point that is set distance and angle away\r\n                var relativePoint = function (initialPoint, angle, distance) {\r\n                    return { \r\n                        x: initialPoint.x + distance * Math.cos(freebody.utils.radians(angle)), \r\n                        y: initialPoint.y + distance * Math.sin(freebody.utils.radians(angle))\r\n                    };  \r\n                }"],[1,"\r\n                var relativePoint = freebody.utils.relativePoint"],[0,";\r\n "]],"start1":3664,"start2":3664,"length1":434,"length2":74}]],"length":6006,"saved":false}
{"ts":1356819560448,"patch":[[{"diffs":[[0,"tion (point) {\r\n"],[1,"                    var box = matter._bounding.box;\r\n"],[0,"                "]],"start1":2963,"start2":2963,"length1":32,"length2":85},{"diffs":[[0,"e(point, matter)"],[-1,";"],[1,","],[0,"\r\n              "]],"start1":3089,"start2":3089,"length1":33,"length2":33},{"diffs":[[0,"        "],[-1,"var"],[1,"   "],[0," angle ="]],"start1":3120,"start2":3120,"length1":19,"length2":19},{"diffs":[[0,"gle)"],[-1,";\r\n                    \r\n                    "],[1,",\r\n                        rotatedPoint = freebody.utils.relativePoint(matter, angle, distance),\r\n                        \r\n                        left = box.offsetLength - box.height,\r\n                        right = box.offsetLength,\r\n                        top = box.width/2,\r\n                        bottom = -box.width/2;\r\n                    \r\n                    if (rotatedPoint.x >= left && rotatedPoint.x <= right && rotatedPoint.y >= bottom && rotatedPoint <= top) {\r\n                        return true;\r\n                    }"],[0,"\r\n  "]],"start1":3217,"start2":3217,"length1":53,"length2":548}]],"length":6554,"saved":false}
{"ts":1356819807475,"patch":[[{"diffs":[[0,"dth/2;\r\n"],[1,"                        console.log(left, right, top, bottom, rotatedPoint);\r\n"],[0,"        "]],"start1":3543,"start2":3543,"length1":16,"length2":94}]],"length":6632,"saved":false}
{"ts":1356819875057,"patch":[[{"diffs":[[0,"tedPoint"],[1,".y"],[0," <= top)"]],"start1":3760,"start2":3760,"length1":16,"length2":18}]],"length":6634,"saved":false}
{"ts":1356819998447,"patch":[[{"diffs":[[0,"2;\r\n"],[-1,"                        console.log(left, right, top, bottom, rotatedPoint);\r\n"],[0,"    "]],"start1":3547,"start2":3547,"length1":86,"length2":8}]],"length":6556,"saved":false}
{"ts":1356820026916,"patch":[[{"diffs":[[0,"dth/2;\r\n"],[1,"                        console.log(left, right, top, bottom, rotatedPoint);\r\n"],[0,"        "]],"start1":3543,"start2":3543,"length1":16,"length2":94}]],"length":6634,"saved":false}
{"ts":1356820058398,"patch":[[{"diffs":[[0," <= top) {\r\n"],[1,"                        console.log('true');\r\n"],[0,"            "]],"start1":3770,"start2":3770,"length1":24,"length2":70}]],"length":6680,"saved":false}
{"ts":1356820173531,"patch":[[{"diffs":[[0,"distance),\r\n"],[1,"                        console.log(point, matter, angle, distance, rotatedPoint);\r\n"],[0,"            "]],"start1":3307,"start2":3307,"length1":24,"length2":108}]],"length":6764,"saved":false}
{"ts":1356820206759,"patch":[[{"diffs":[[0,"),\r\n"],[-1,"                        console.log(point, matter, angle, distance, rotatedPoint);\r\n"],[0,"    "]],"start1":3315,"start2":3315,"length1":92,"length2":8},{"diffs":[[0,"dth/2;\r\n"],[1,"                        console.log(point, matter, angle, distance, rotatedPoint);\r\n"],[0,"        "]],"start1":3543,"start2":3543,"length1":16,"length2":100}]],"length":6764,"saved":false}
{"ts":1356820472228,"patch":[[{"diffs":[[0,"s.relativePoint("],[-1,"matter"],[1,"point"],[0,", angle, distanc"]],"start1":3276,"start2":3276,"length1":38,"length2":37}]],"length":6763,"saved":false}
{"ts":1356820567449,"patch":[[{"diffs":[[0,"log("],[-1,"point, matter, angle, distance, "],[0,"rota"]],"start1":3582,"start2":3582,"length1":40,"length2":8}]],"length":6731,"saved":false}
{"ts":1356820582969,"patch":[[{"diffs":[[0,"    "],[-1,"console.log(rotatedPoint);"],[0,"\r\n  "]],"start1":3570,"start2":3570,"length1":34,"length2":8}]],"length":6705,"saved":false}
{"ts":1356820623184,"patch":[[{"diffs":[[0,"ole.log("],[1,"point, "],[0,"left, ri"]],"start1":3604,"start2":3604,"length1":16,"length2":23}]],"length":6712,"saved":false}
{"ts":1356820747985,"patch":[[{"diffs":[[0,"vePoint("],[-1,"point"],[1,"{ x: 0, y: 0 }"],[0,", angle,"]],"start1":3284,"start2":3284,"length1":21,"length2":30}]],"length":6721,"saved":false}
{"ts":1356820872660,"patch":[[{"diffs":[[0,"int("],[-1,"{ x: 0, y: 0 }"],[1,"undefined"],[0,", an"]],"start1":3288,"start2":3288,"length1":22,"length2":17}]],"length":6716,"saved":false}
{"ts":1356820889723,"patch":[[{"diffs":[[0,"2;\r\n"],[-1,"                        \r\n                        console.log(point, left, right, top, bottom, rotatedPoint);\r\n"],[0,"    "]],"start1":3550,"start2":3550,"length1":119,"length2":8}]],"length":6605,"saved":false}
{"ts":1356820917999,"patch":[[{"diffs":[[0,"        "],[-1,"if"],[1,"return"],[0," (rotate"]],"start1":3588,"start2":3588,"length1":18,"length2":22},{"diffs":[[0,"top)"],[-1," {\r\n                        console.log('true');\r\n                        return true;\r\n                    }"],[0,"\r\n  "]],"start1":3703,"start2":3703,"length1":117,"length2":8}]],"length":6500,"saved":false}
{"ts":1356820949196,"patch":[[{"diffs":[[0,"          //"],[1," TODO:"],[0," Step 3: Che"]],"start1":1799,"start2":1799,"length1":24,"length2":30}]],"length":6506,"saved":false}
{"ts":1356821032406,"patch":[[{"diffs":[[0,"llision("],[-1,"matter, "],[0,""],[1,""],[0,"obj)) {\r"]],"start1":1633,"start2":1633,"length1":24,"length2":16},{"diffs":[[0,"                "],[1,"if (matter._boundingBoxCollision(obj)) {"],[0,"\r\n              "]],"start1":1741,"start2":1741,"length1":32,"length2":72},{"diffs":[[0,"                "],[1,"    "],[0,"// TODO: Step 3:"]],"start1":1825,"start2":1825,"length1":32,"length2":36},{"diffs":[[0,"            "],[1,"    "],[0,"// If collis"]],"start1":1929,"start2":1929,"length1":24,"length2":28},{"diffs":[[0,"                "],[1,"  "],[1,"  "],[0,"matter.collide(o"]],"start1":1996,"start2":1996,"length1":32,"length2":36},{"diffs":[[0,"        "],[1,"    "],[0,"obj.coll"]],"start1":2050,"start2":2050,"length1":16,"length2":20},{"diffs":[[0,"llide(matter);\r\n"],[1,"                    }\r\n"],[0,"                "]],"start1":2068,"start2":2068,"length1":32,"length2":55}]],"length":6577,"saved":false}
{"ts":1356821140045,"patch":[[{"diffs":[[0,"llide(matter);\r\n"],[1,"                        return true;\r\n"],[0,"                "]],"start1":2068,"start2":2068,"length1":32,"length2":70}]],"length":6615,"saved":false}
{"ts":1356821145392,"patch":[[{"diffs":[[0,"             }\r\n"],[1,"                \r\n                return false;\r\n"],[0,"            },\r\n"]],"start1":2148,"start2":2148,"length1":32,"length2":81}]],"length":6664,"saved":false}
{"contributors":[],"silentsave":false,"ts":1356825892462,"patch":[[{"diffs":[[0,"     {\r\n"],[-1,"            \r\n"],[0,"        "]],"start1":1228,"start2":1228,"length1":30,"length2":16}]],"length":6650,"saved":false}
{"ts":1356827356325,"patch":[[{"diffs":[[0,"function (obj) {"],[1,"                "],[0,"\r\n              "]],"start1":1438,"start2":1438,"length1":32,"length2":48}]],"length":6666,"saved":false}
{"ts":1356828460580,"patch":[[{"diffs":[[0," (obj) {"],[-1,"                "],[0,"\r\n      "]],"start1":1446,"start2":1446,"length1":32,"length2":16}]],"length":6650,"saved":false}
{"ts":1356880293964,"patch":[[{"diffs":[[0,"                "],[-1,""],[0,""],[1,"if (_.isFunction(matter.checkCollision)) {\r\n                    if (matter.checkCollision(obj)) {\r\n                        matter.collide(obj);\r\n                        obj.collide(matter);\r\n                        \r\n                        return true;\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n                \r\n                /*\r\n                "],[0,"// Step 1: Check"]],"start1":1510,"start2":1510,"length1":32,"length2":432},{"diffs":[[0," return false;\r\n"],[1,"                */\r\n"],[0,"            },\r\n"]],"start1":2583,"start2":2583,"length1":32,"length2":52},{"diffs":[[0,"        "],[-1,""],[0,""],[1,"/*"],[0,"_centerD"]],"start1":3009,"start2":3009,"length1":16,"length2":18},{"diffs":[[0,"\r\n            },"],[1,"*/"],[0,"\r\n            \r\n"]],"start1":3301,"start2":3301,"length1":32,"length2":34},{"diffs":[[0,"        "],[1,"/*"],[0,"_boundin"]],"start1":3339,"start2":3339,"length1":16,"length2":18},{"diffs":[[0,"\r\n            },"],[-1,""],[0,""],[1,"*/"],[0,"\r\n            \r\n"]],"start1":4478,"start2":4478,"length1":32,"length2":34},{"diffs":[[0,"        "],[-1,""],[0,""],[1,"/*"],[0,"bounding"]],"start1":4601,"start2":4601,"length1":16,"length2":18},{"diffs":[[0," \r\n            }"],[-1,""],[0,""],[1,"*/"],[0,"\r\n            \r\n"]],"start1":7000,"start2":7000,"length1":32,"length2":34}]],"length":7082,"saved":false}
{"ts":1356881339610,"patch":[[{"diffs":[[0,"e;\r\n"],[-1,"                \r\n                /*\r\n                // Step 1: Check center distance against radius\r\n                if (matter._centerDistanceCollision(obj)) {\r\n                    \r\n                    // Step 2: Check points within bounding box\r\n                    if (matter._boundingBoxCollision(obj)) {\r\n                    \r\n                        // TODO: Step 3: Check points within triangular area\r\n                    \r\n                        // If collision tests pass, trigger collision\r\n                        matter.collide(obj);\r\n                        obj.collide(matter);\r\n                        return true;\r\n                    }\r\n                }\r\n                \r\n                return false;\r\n                */\r\n"],[0,"    "]],"start1":1868,"start2":1868,"length1":755,"length2":8}]],"length":6335,"saved":false}
{"ts":1356881351423,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"            /*_centerDistanceCollision: function (obj) {\r\n                var centerDistance = freebody.utils.distance(this, obj),\r\n                    collisionDistance = this._bounding.radius + obj._bounding.radius;\r\n                \r\n                return centerDistance <= collisionDistance;\r\n            },*/\r\n            \r\n"],[0,"    "]],"start1":2254,"start2":2254,"length1":338,"length2":8}]],"length":6005,"saved":false}
{"ts":1356883603029,"patch":[[{"diffs":[[0,"              \r\n"],[1,"                // Check collision (if defined)\r\n"],[0,"                "]],"start1":1494,"start2":1494,"length1":32,"length2":81},{"diffs":[[0,"ion)"],[-1,") {\r\n                    if ("],[1," && "],[0,"matt"]],"start1":1610,"start2":1610,"length1":37,"length2":12},{"diffs":[[0,"                "],[-1,"   "],[-1," "],[0,"matter.collide(o"]],"start1":1653,"start2":1653,"length1":36,"length2":32},{"diffs":[[0,"lide(obj);\r\n"],[-1,"    "],[0,"            "]],"start1":1679,"start2":1679,"length1":28,"length2":24},{"diffs":[[0,"            "],[-1,"  "],[-1,"  \r\n    "],[1,"\r\n"],[0,"            "]],"start1":1741,"start2":1741,"length1":34,"length2":26},{"diffs":[[0," true;\r\n"],[-1,"                    }\r\n"],[0,"        "]],"start1":1781,"start2":1781,"length1":39,"length2":16}]],"length":5990,"saved":false}
{"ts":1356886754399,"patch":[[{"diffs":[[0,"j) {"],[-1,"\r\n                var matter = this;\r\n                \r\n                console.log('Collision!', matter);\r\n            },\r\n            \r\n            /*_boundingBoxCollision: function (obj) {\r\n                var objPoints = obj.boundingBox(),\r\n                    matter = this;\r\n                \r\n                var pointIsInsideBox = function (point) {\r\n                    var box = matter._bounding.box;\r\n                    var distance = freebody.utils.distance(point, matter),\r\n                        angle = freebody.utils.angle(matter, point) - (matter._bounding.box.theta + matter.angle),\r\n                        rotatedPoint = freebody.utils.relativePoint(undefined, angle, distance),\r\n                        \r\n                        left = box.offsetLength - box.height,\r\n                        right = box.offsetLength,\r\n                        top = box.width/2,\r\n                        bottom = -box.width/2;\r\n                    \r\n                    return (rotatedPoint.x >= left && rotatedPoint.x <= right && rotatedPoint.y >= bottom && rotatedPoint.y <= top)\r\n                    \r\n                }\r\n                \r\n                return !!_.find(objPoints, function (point) {\r\n                    return pointIsInsideBox(point)\r\n                });\r\n            },*/\r\n            \r\n            /**\r\n             * Getter/Setter for the bounding box\r\n             */\r\n            /*boundingBox: function (width, height, offsetLength, theta) {\r\n                var matter = this;\r\n                \r\n               \r\n                var relativePoint = freebody.utils.relativePoint;\r\n                \r\n                var findPoints = function () {\r\n                    var box = matter._bounding.box,\r\n                        angle = box.theta + matter.angle,\r\n                        points = [],\r\n                        middlePoint;\r\n                    \r\n                    middlePoint = relativePoint(matter, angle, box.offsetLength);\r\n                    points[0] = relativePoint(middlePoint, angle - 90, box.width / 2);\r\n                    points[3] = relativePoint(middlePoint, angle + 90, box.width / 2);\r\n                    \r\n                    points[1] = relativePoint(points[0], angle - 180, box.height);\r\n                    points[2] = relativePoint(points[3], angle - 180, box.height);\r\n                    \r\n                    return points;\r\n                };\r\n                \r\n                var saveBox = function () {\r\n                    matter._bounding.box = {\r\n                        width: width,\r\n                        height: height,\r\n                        offsetLength: offsetLength,\r\n                        theta: theta\r\n                    }\r\n                }\r\n                \r\n                var setRadius = function() {\r\n                    var points = findPoints();\r\n                    var maxDistance = 0;\r\n                    for (var i = 0; i < points.length; i += 1) {\r\n                        var distance = freebody.utils.distance(points[i], matter);\r\n                        if (distance > maxDistance) {\r\n                            maxDistance = distance;\r\n                        }\r\n                    }\r\n                    \r\n                    matter._bounding.radius = maxDistance;\r\n                }\r\n                \r\n                // If width is defined, assume setter, otherwise getter\r\n                if (_.isUndefined(width)) {\r\n                    // Getter\r\n                    return findPoints()\r\n                    \r\n                } else {\r\n                    // Setter\r\n                    // TODO: set bounding radius\r\n                    \r\n                    // Store bounding box info\r\n                    saveBox();\r\n                    setRadius();\r\n                }            \r\n            }*/"],[1,"}"],[0,"\r\n  "]],"start1":2101,"start2":2101,"length1":3829,"length2":9}]],"length":2170,"saved":false}
{"contributors":[],"silentsave":false,"ts":1356926949490,"patch":[[{"diffs":[[0,"0;\r\n"],[-1,"        matter._bounding = {\r\n            radius: 0,\r\n            box: {\r\n                width: 0,\r\n                height: 0,\r\n                offsetLength: 0,\r\n                theta: 0\r\n            }\r\n        };\r\n"],[0,"    "]],"start1":379,"start2":379,"length1":224,"length2":8}]],"length":1954,"saved":false}
{"ts":1356928179267,"patch":[[{"diffs":[[0,"object\r\n        "],[1,"/*"],[0,"if (_.isFunction"]],"start1":605,"start2":605,"length1":32,"length2":34},{"diffs":[[0,"     \r\n        }"],[1,"*/"],[0,"\r\n        \r\n    "]],"start1":705,"start2":705,"length1":32,"length2":34}]],"length":1958,"saved":false}
{"ts":1356928374839,"patch":[[{"diffs":[[0,"        "],[-1,"/*"],[0,"if (_.is"]],"start1":613,"start2":613,"length1":18,"length2":16},{"diffs":[[0,"       }"],[-1,"*/"],[0,"\r\n      "]],"start1":711,"start2":711,"length1":18,"length2":16}]],"length":1954,"saved":false}
{"ts":1356928676796,"patch":[[{"diffs":[[0,"object\r\n        "],[1,"/*"],[0,"if (_.isFunction"]],"start1":605,"start2":605,"length1":32,"length2":34},{"diffs":[[0,"     \r\n        }"],[1,"*/"],[0,"\r\n        \r\n    "]],"start1":705,"start2":705,"length1":32,"length2":34}]],"length":1958,"saved":false}
{"ts":1356928875393,"patch":[[{"diffs":[[0,"on(obj)) {\r\n"],[1,"                    console.log('Collision!');\r\n"],[0,"            "]],"start1":1425,"start2":1425,"length1":24,"length2":72}]],"length":2006,"saved":false}
{"ts":1356929995029,"patch":[[{"diffs":[[0," {\r\n"],[-1,"                    console.log('Collision!');\r\n"],[0,"    "]],"start1":1433,"start2":1433,"length1":56,"length2":8}]],"length":1958,"saved":false}
{"ts":1356930374417,"patch":[[{"diffs":[[0,"  \r\n"],[-1,"        // Create display object\r\n        /*if (_.isFunction(matter.create)) {\r\n            matter.create.call(matter);            \r\n        }*/\r\n        \r\n"],[0,"    "]],"start1":575,"start2":575,"length1":164,"length2":8}]],"length":1802,"saved":false}
