{"ts":1355276228324,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":["tim.hall.engr@gmail.com"],"silentsave":false,"ts":1355280791286,"patch":[[{"diffs":[[1,"/**\n * Matter in the universe with physics and display\n */\n\ndefine(\n[],\nfunction () {\n    \n    \n});"]],"start1":0,"start2":0,"length1":0,"length2":99}]],"length":99,"saved":false}
{"ts":1355280866585,"patch":[[{"diffs":[[-1,"/**\n * Matter in the universe with physics and display\n */\n\ndefine(\n[],\n"],[1,"define(\n['cosmic/Matter'],\nfunction (Matter) {\n    var _spec = this\n    \n    describe('Matter', "],[0,"func"]],"start1":0,"start2":0,"length1":76,"length2":100},{"diffs":[[0,"    "],[-1,"\n"],[0,"    \n"],[1,"    });\n"],[0,"})"],[-1,";"]],"start1":110,"start2":110,"length1":13,"length2":19}]],"length":129,"saved":false}
{"ts":1355281609203,"patch":[[{"diffs":[[0,"/Matter'"],[1,", 'freebody/Body'"],[0,"],\nfunct"]],"start1":16,"start2":16,"length1":16,"length2":33},{"diffs":[[0," (Matter"],[1,", Body"],[0,") {\n    "]],"start1":52,"start2":52,"length1":16,"length2":22},{"diffs":[[0,") {\n        "],[1,"it('should inherit Body properties', function () {\n            var matter = new Matter();\n            \n            expect(matter instanceof Body).toBeTruthy();\n        })"],[0,"\n    });\n})"]],"start1":129,"start2":129,"length1":23,"length2":193}]],"length":322,"saved":false}
{"contributors":[],"silentsave":false,"ts":1356810414548,"patch":[[{"diffs":[[0,"ter'"],[-1,", 'freebody/Body'"],[0,"],\nf"]],"start1":20,"start2":20,"length1":25,"length2":8},{"diffs":[[0,"tter"],[-1,", Body"],[0,") {\n"]],"start1":39,"start2":39,"length1":14,"length2":8},{"diffs":[[0,"    "],[-1,"\n            expect(matter instanceof Body).toBeTruthy();"],[1,"expect(typeof matter.advance).toEqual('function');\n        });\n        \n        it('should call create display method', function () {\n            var spy = sinon.spy(),\n                Obj = Matter;\n            \n            Obj.prototype.create = spy;\n            \n            var matter = new Obj();\n            expect(spy).toHaveBeenCalled();\n        });\n        \n        describe('Collisions', function () {\n            "],[0,"\n   "]],"start1":216,"start2":216,"length1":65,"length2":431}]],"length":665,"saved":false}
{"ts":1356810817464,"patch":[[{"diffs":[[0,") {\n            "],[1,"beforeEach(function () {\n                var matter = new Matter();\n            })\n            \n            it('should have collision and collide function', function () {\n                expect(typeof matter.)\n            })"],[0,"\n        })\n    "]],"start1":627,"start2":627,"length1":32,"length2":256}]],"length":889,"saved":false}
{"ts":1356810840093,"patch":[[{"diffs":[[0," matter."],[-1,")"],[1,"collision).toEqual('function');\n                expect(typeof matter.collide).toEqual('function');"],[0,"\n       "]],"start1":843,"start2":843,"length1":17,"length2":114}]],"length":986,"saved":false}
{"ts":1356810861041,"patch":[[{"diffs":[[0,"                "],[-1,"var "],[1,"_spec."],[0,"matter = new Mat"]],"start1":668,"start2":668,"length1":36,"length2":38},{"diffs":[[0,"  expect(typeof "],[1,"_spec."],[0,"matter.collision"]],"start1":830,"start2":830,"length1":32,"length2":38},{"diffs":[[0,"pect(typeof "],[1,"_spec."],[0,"matter.colli"]],"start1":909,"start2":909,"length1":24,"length2":30}]],"length":1000,"saved":false}
{"ts":1356810917323,"patch":[[{"diffs":[[0,";\n            })"],[1,";"],[0,"\n            \n  "]],"start1":711,"start2":711,"length1":32,"length2":33},{"diffs":[[0,"al('function');\n"],[1,"            });\n            \n            it('should distance between objects', function () {\n                \n"],[0,"            })\n "]],"start1":949,"start2":949,"length1":32,"length2":142}]],"length":1111,"saved":false}
{"ts":1356811320801,"patch":[[{"diffs":[[0,"    "],[-1,"it('should distance between objects', function () {"],[1,"describe('Center distance collision', function () {\n                it('should be true when distance is within radii', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter.bounding.radius = 100;\n                    \n                    obj.x = 100;\n                    obj.y = 0;\n                    obj.bounding.radius = 100;\n                \n                    expect(_spec.matter._centerDistanceCollision(obj)).toBeTruthy();"],[0,"\n   "]],"start1":1002,"start2":1002,"length1":59,"length2":604},{"diffs":[[0,"                "],[1,"});"],[0,"\n            })\n"]],"start1":1603,"start2":1603,"length1":32,"length2":35},{"diffs":[[0,"          })"],[1,";"],[0,"\n        })\n"]],"start1":1625,"start2":1625,"length1":24,"length2":25},{"diffs":[[0,"      })"],[1,";"],[0,"\n    });"]],"start1":1641,"start2":1641,"length1":16,"length2":17}]],"length":1661,"saved":false}
{"ts":1356811541012,"patch":[[{"diffs":[[0,"            });\n"],[1,"                \n                it('should be false when distance is outside radii', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter.bounding.radius = 10;\n                    \n                    obj.x = 100;\n                    obj.y = 0;\n                    obj.bounding.radius = 10;\n                \n                    expect(_spec.matter._centerDistanceCollision(obj)).toBeTruthy();\n                });\n                \n                it('should be true when distance is equal to radii', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter.bounding.radius = 50;\n                    \n                    obj.x = 100;\n                    obj.y = 0;\n                    obj.bounding.radius = 50;\n                \n                    expect(_spec.matter._centerDistanceCollision(obj)).toBeTruthy();\n                });\n"],[0,"            });\n"]],"start1":1607,"start2":1607,"length1":32,"length2":1196}]],"length":2825,"saved":false}
{"ts":1356811580116,"patch":[[{"diffs":[[0,"ion(obj)).to"],[-1,"BeTruthy();"],[1,"Equal(true)"],[0,"\n           "]],"start1":1579,"start2":1579,"length1":35,"length2":35},{"diffs":[[0,"ion(obj)).to"],[-1,"BeTruthy("],[1,"Equal(false"],[0,");\n         "]],"start1":2161,"start2":2161,"length1":33,"length2":35},{"diffs":[[0,").to"],[-1,"BeTruthy("],[1,"Equal(true"],[0,");\n "]],"start1":2753,"start2":2753,"length1":17,"length2":18}]],"length":2828,"saved":false}
{"ts":1356812420238,"patch":[[{"diffs":[[0,"         matter."],[1,"_bounding.circle.center."],[0,"x = 0;\n         "]],"start1":1262,"start2":1262,"length1":32,"length2":56},{"diffs":[[0,"         matter."],[1,"_bounding.circle.center."],[0,"y = 0;\n         "]],"start1":1320,"start2":1320,"length1":32,"length2":56},{"diffs":[[0,"         matter."],[1,"_"],[0,"bounding.radius "]],"start1":1378,"start2":1378,"length1":32,"length2":33},{"diffs":[[0,"atter._bounding."],[1,"circle."],[0,"radius = 100;\n  "]],"start1":1388,"start2":1388,"length1":32,"length2":39},{"diffs":[[0,"            obj."],[1,"_bounding.circle.center."],[0,"x = 100;\n       "]],"start1":1454,"start2":1454,"length1":32,"length2":56},{"diffs":[[0,"            obj."],[1,"_bounding.circle.center."],[0,"y = 0;\n         "]],"start1":1511,"start2":1511,"length1":32,"length2":56},{"diffs":[[0,"            obj."],[1,"_"],[0,"bounding.radius "]],"start1":1566,"start2":1566,"length1":32,"length2":33},{"diffs":[[0,"  obj._bounding."],[1,"circle."],[0,"radius = 100;\n  "]],"start1":1576,"start2":1576,"length1":32,"length2":39}]],"length":2940,"saved":false}
{"ts":1356812513649,"patch":[[{"diffs":[[0,"         matter."],[1,"_bounding.circle.center."],[0,"x = 0;\n         "]],"start1":1958,"start2":1958,"length1":32,"length2":56},{"diffs":[[0,"         matter."],[1,"_bounding.circle.center."],[0,"y = 0;\n         "]],"start1":2016,"start2":2016,"length1":32,"length2":56},{"diffs":[[0,"         matter."],[1,"_"],[0,"bounding.radius "]],"start1":2074,"start2":2074,"length1":32,"length2":33},{"diffs":[[0,"atter._bounding."],[1,"circle."],[0,"radius = 10;\n   "]],"start1":2084,"start2":2084,"length1":32,"length2":39},{"diffs":[[0,"            obj."],[1,"_bounding.circle.center."],[0,"x = 100;\n       "]],"start1":2149,"start2":2149,"length1":32,"length2":56},{"diffs":[[0,"            obj."],[1,"_bounding.circle.center."],[0,"y = 0;\n         "]],"start1":2206,"start2":2206,"length1":32,"length2":56},{"diffs":[[0,"            obj."],[1,"_"],[0,"bounding.radius "]],"start1":2261,"start2":2261,"length1":32,"length2":33},{"diffs":[[0,"  obj._bounding."],[1,"circle."],[0,"radius = 10;\n   "]],"start1":2271,"start2":2271,"length1":32,"length2":39},{"diffs":[[0,"     matter."],[1,"_bounding.circle.center."],[0,"x = 0;\n     "]],"start1":2658,"start2":2658,"length1":24,"length2":48},{"diffs":[[0,"     matter."],[1,"_bounding.circle.center."],[0,"y = 0;\n     "]],"start1":2716,"start2":2716,"length1":24,"length2":48},{"diffs":[[0," matter."],[1,"_"],[0,"bounding"]],"start1":2778,"start2":2778,"length1":16,"length2":17},{"diffs":[[0,"atter._bounding."],[1,"circle."],[0,"radius = 50;\n   "]],"start1":2780,"start2":2780,"length1":32,"length2":39},{"diffs":[[0,"    obj."],[1,"_bounding.circle.center."],[0,"x = 100;"]],"start1":2853,"start2":2853,"length1":16,"length2":40},{"diffs":[[0,"    obj."],[1,"_bounding.circle.center."],[0,"y = 0;\n "]],"start1":2910,"start2":2910,"length1":16,"length2":40},{"diffs":[[0,"    obj."],[1,"_"],[0,"bounding"]],"start1":2965,"start2":2965,"length1":16,"length2":17},{"diffs":[[0,"ounding."],[1,"circle."],[0,"radius ="]],"start1":2975,"start2":2975,"length1":16,"length2":23}]],"length":3164,"saved":false}
{"ts":1356812541529,"patch":[[{"diffs":[[0,"rcle.radius = 10"],[1,"0"],[0,";\n              "]],"start1":2102,"start2":2102,"length1":32,"length2":33}]],"length":3165,"saved":false}
{"ts":1356812579600,"patch":[[{"diffs":[[0,"rcle.radius = 10"],[-1,"0"],[0,";\n              "]],"start1":2102,"start2":2102,"length1":33,"length2":32}]],"length":3164,"saved":false}
{"ts":1356813823070,"patch":[[{"diffs":[[0,"ter."],[-1,"_bounding.circle.center."],[0,"x = "]],"start1":1274,"start2":1274,"length1":32,"length2":8},{"diffs":[[0,"ter."],[-1,"_bounding.circle.center."],[0,"y = "]],"start1":1308,"start2":1308,"length1":32,"length2":8},{"diffs":[[0," matter."],[-1,"_bounding.circle."],[0,"radius ="]],"start1":1338,"start2":1338,"length1":33,"length2":16},{"diffs":[[0,"obj."],[-1,"_bounding.circle.center."],[0,"x = "]],"start1":1401,"start2":1401,"length1":32,"length2":8},{"diffs":[[0,"obj."],[-1,"_bounding.circle.center."],[0,"y = "]],"start1":1434,"start2":1434,"length1":32,"length2":8},{"diffs":[[0,"    obj."],[-1,"_bounding.circle."],[0,"radius ="]],"start1":1461,"start2":1461,"length1":33,"length2":16},{"diffs":[[0,"ter."],[-1,"_bounding.circle.center."],[0,"x = "]],"start1":1840,"start2":1840,"length1":32,"length2":8},{"diffs":[[0,"ter."],[-1,"_bounding.circle.center."],[0,"y = "]],"start1":1874,"start2":1874,"length1":32,"length2":8},{"diffs":[[0," matter."],[-1,"_bounding.circle."],[0,"radius ="]],"start1":1904,"start2":1904,"length1":33,"length2":16},{"diffs":[[0,"obj."],[-1,"_bounding.circle.center."],[0,"x = "]],"start1":1966,"start2":1966,"length1":32,"length2":8},{"diffs":[[0,"obj."],[-1,"_bounding.circle.center."],[0,"y = "]],"start1":1999,"start2":1999,"length1":32,"length2":8},{"diffs":[[0,"    obj."],[-1,"_bounding.circle."],[0,"radius ="]],"start1":2026,"start2":2026,"length1":33,"length2":16},{"diffs":[[0,"ter."],[-1,"_bounding.circle.center."],[0,"x = "]],"start1":2406,"start2":2406,"length1":32,"length2":8},{"diffs":[[0,"ter."],[-1,"_bounding.circle.center."],[0,"y = "]],"start1":2440,"start2":2440,"length1":32,"length2":8},{"diffs":[[0," matter."],[-1,"_bounding.circle."],[0,"radius ="]],"start1":2470,"start2":2470,"length1":33,"length2":16},{"diffs":[[0,"obj."],[-1,"_bounding.circle.center."],[0,"x = "]],"start1":2532,"start2":2532,"length1":32,"length2":8},{"diffs":[[0,"obj."],[-1,"_bounding.circle.center."],[0,"y = "]],"start1":2565,"start2":2565,"length1":32,"length2":8},{"diffs":[[0,"obj."],[-1,"_bounding.circle."],[0,"radi"]],"start1":2596,"start2":2596,"length1":25,"length2":8}]],"length":2774,"saved":false}
{"ts":1356813913873,"patch":[[{"diffs":[[0,"         matter."],[1,"_bounding."],[0,"radius = 100;\n  "]],"start1":1330,"start2":1330,"length1":32,"length2":42},{"diffs":[[0,"g.radius = 100;\n"],[-1,""],[0,"                "]],"start1":1354,"start2":1354,"length1":32,"length2":32},{"diffs":[[0,"            obj."],[1,"_bounding."],[0,"radius = 100;\n  "]],"start1":1463,"start2":1463,"length1":32,"length2":42},{"diffs":[[0,"         matter."],[1,"_bounding."],[0,"radius = 10;\n   "]],"start1":1916,"start2":1916,"length1":32,"length2":42},{"diffs":[[0,"            obj."],[1,"_bounding."],[0,"radius = 10;\n   "]],"start1":2048,"start2":2048,"length1":32,"length2":42},{"diffs":[[0," matter."],[1,"_bounding."],[0,"radius ="]],"start1":2510,"start2":2510,"length1":16,"length2":26},{"diffs":[[0,"     obj.y = 0;\n"],[-1,""],[0,"                "]],"start1":2610,"start2":2610,"length1":32,"length2":32},{"diffs":[[0,"    obj."],[1,"_bounding."],[0,"radius ="]],"start1":2642,"start2":2642,"length1":16,"length2":26}]],"length":2834,"saved":false}
{"ts":1356815184566,"patch":[[{"diffs":[[0,"            });\n"],[1,"            \n            describe('Bounding box collision', function () {\n                it('should create bounding box from given parameters', function () {\n                    var matter = _spec.matter;\n                    \n                    // Set bounding box\n                    matter.boundingBox(10, 10, 5, 0);\n                    \n                    // Get bounding box\n                    var box = matter.boundingBox();\n                    \n                    expect(box.length).toEqual(4);\n                    expect(box[0]).toEqual({ x: 5, y: 5 });\n                    expect(box[1]).toEqual({ x: 5, y: -5 });\n                    expect(box[2]).toEqual({ x: -5, y: -5 });\n                    expect(box[3]).toEqual({ x: -5, y: 5 });\n                })\n            })\n"],[0,"        });\n    "]],"start1":2796,"start2":2796,"length1":32,"length2":816}]],"length":3618,"saved":false}
{"ts":1356815290863,"patch":[[{"diffs":[[0,"({ x: 5, y: "],[1,"-"],[0,"5 });\n      "]],"start1":3360,"start2":3360,"length1":24,"length2":25},{"diffs":[[0,"]).toEqual({ x: "],[1,"-"],[0,"5, y: -5 });\n   "]],"start1":3411,"start2":3411,"length1":32,"length2":33},{"diffs":[[0,"ual({ x: -5, y: "],[-1,"-"],[0,"5 });\n          "]],"start1":3480,"start2":3480,"length1":33,"length2":32},{"diffs":[[0,"]).toEqual({ x: "],[-1,"-"],[0,"5, y: 5 });\n    "]],"start1":3534,"start2":3534,"length1":33,"length2":32}]],"length":3618,"saved":false}
{"ts":1356815425524,"patch":[[{"diffs":[[0,"x[0]"],[1,".x"],[0,").to"],[-1,"Equal({ x: 5, y: -5 }"],[1,"BeCloseTo(5);\n                    expect(box[0].y).toBeCloseTo(-5"],[0,");\n"],[1,"                    \n"],[0,"    "]],"start1":3347,"start2":3347,"length1":36,"length2":103},{"diffs":[[0,"x[1]"],[1,".x"],[0,").to"],[-1,"Equal({ x: -5, y: -5 }"],[1,"BeCloseTo(-5);\n                    expect(box[1].y).toBeCloseTo(-5);\n                    \n                    expect(box[2].x).toBeCloseTo(-5"],[0,");\n "]],"start1":3475,"start2":3475,"length1":34,"length2":155},{"diffs":[[0,"x[2]"],[1,".y"],[0,").to"],[-1,"Equal({ x: -5, y: 5 });"],[1,"BeCloseTo(5);\n                    "],[0,"\n   "]],"start1":3658,"start2":3658,"length1":35,"length2":48},{"diffs":[[0,"x[3]"],[1,".x"],[0,").to"],[-1,"Equal({ x: 5, y: 5 }"],[1,"BeCloseTo(5);\n                    expect(box[3].y).toBeCloseTo(5"],[0,");\n "]],"start1":3732,"start2":3732,"length1":32,"length2":78}]],"length":3865,"saved":false}
{"ts":1356815441315,"patch":[[{"diffs":[[0,"              })"],[1,";\n                \n                "],[0,"\n            })\n"]],"start1":3811,"start2":3811,"length1":32,"length2":67}]],"length":3900,"saved":false}
{"ts":1356815542086,"patch":[[{"diffs":[[0,"                "],[1,"it('should set radius when bounding box is set', function () {\n                    var matter = _spec.matter;\n                    \n                    // Set bounding box\n                    matter.boundingBox(20, 20, 5, 0);\n                    \n                    expect(matter._bounding.radius).toEqual(15);\n                })"],[0,"\n            })\n"]],"start1":3846,"start2":3846,"length1":32,"length2":361}]],"length":4229,"saved":false}
{"ts":1356815565755,"patch":[[{"diffs":[[0,"Box(20, "],[-1,"2"],[0,"0, 5, 0)"]],"start1":4068,"start2":4068,"length1":17,"length2":16}]],"length":4228,"saved":false}
{"ts":1356815606426,"patch":[[{"diffs":[[0,"Box(20, "],[-1,"0"],[1,"5"],[0,", 5, 0);"]],"start1":4068,"start2":4068,"length1":17,"length2":17},{"diffs":[[0,"ual("],[-1,"15"],[1,"Math.sqrt(15*15 + 5*5)"],[0,");\n "]],"start1":4163,"start2":4163,"length1":10,"length2":30}]],"length":4248,"saved":false}
{"ts":1356815658828,"patch":[[{"diffs":[[0,"dius).to"],[-1,"Equal"],[1,"BeCloseTo"],[0,"(Math.sq"]],"start1":4153,"start2":4153,"length1":21,"length2":25}]],"length":4252,"saved":false}
{"ts":1356815679367,"patch":[[{"diffs":[[0,"5 + 5*5)"],[1,",2"],[0,");\n     "]],"start1":4185,"start2":4185,"length1":16,"length2":18}]],"length":4254,"saved":false}
{"ts":1356816317689,"patch":[[{"diffs":[[0,"15*15 + "],[-1,"5*"],[1,"2.5*2."],[0,"5),2);\n "]],"start1":4181,"start2":4181,"length1":18,"length2":22}]],"length":4258,"saved":false}
{"ts":1356816530988,"patch":[[{"diffs":[[0,"Box("],[-1,"20, 5"],[1,"5, 20"],[0,", 5,"]],"start1":4068,"start2":4068,"length1":13,"length2":13}]],"length":4258,"saved":false}
{"ts":1356819739813,"patch":[[{"diffs":[[0,"             })\n"],[1,"                \n                it('should be true when point is inside box', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter.boundingBox(10, 10, 5, 0);\n                    \n                    obj.x = 0;\n                    obj.y = 0;\n                    obj.boundingBox(10, 10, 5, 0);\n                \n                    expect(_spec.matter._boundingBoxCollision(obj)).toEqual(true);\n                    \n                    \n                    \n                })\n"],[0,"            })\n "]],"start1":4205,"start2":4205,"length1":32,"length2":675}]],"length":4901,"saved":false}
{"ts":1356819769449,"patch":[[{"diffs":[[0,"boundingBox("],[-1,"10, 10, "],[1,"5, 5, 2."],[0,"5, 0);\n     "]],"start1":4655,"start2":4655,"length1":32,"length2":32}]],"length":4901,"saved":false}
{"ts":1356819992902,"patch":[[{"diffs":[[0,"qual(true);\n    "],[1,"            })\n"],[0,"                "]],"start1":4770,"start2":4770,"length1":32,"length2":47},{"diffs":[[0,"    "],[-1,"    \n                    "],[1,"it('should be false when point is outside box', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 100;\n                    matter.y = 0;\n                    matter.boundingBox(10, 10, 5, 0);\n                    \n                    obj.x = 0;\n                    obj.y = 0;\n                    obj.boundingBox(5, 5, 2.5, 0);\n                \n                    expect(_spec.matter._boundingBoxCollision(obj)).toEqual(false);\n                })\n                \n                it('should be true when point is touching box', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter.boundingBox(10, 10, 5, 0);\n                    \n                    obj.x = 0;\n                    obj.y = 0;\n                    obj.boundingBox(10, 10, 5, 0);\n                \n                    expect(_spec.matter._boundingBoxCollision(obj)).toEqual(true);"],[0,"\n   "]],"start1":4830,"start2":4830,"length1":33,"length2":1122}]],"length":6005,"saved":false}
{"ts":1356821244156,"patch":[[{"diffs":[[0,");\n            \n"],[1,"            it('should call collide on both objects on collision', function () {\n                var matter = new Matter(),\n                    obj = new Matter(),\n                    spyMatter = sinon.spy(),\n                    spyObj = sinon.spy();\n                    \n                matter.x = 0;\n                matter.y = 0;\n                matter.boundingBox(10, 10, 5, 0);\n                matter.collide = spyMatter;\n                \n                obj.x = 0;\n                obj.y = 0;\n                obj.boundingBox(5, 5, 2.5, 0);\n                obj.collide = spyObj;\n            \n                expect(matter.collision(obj)).toEqual(true);\n                expect(spyMatter).toHaveBeenCalled();\n                expect(spyObj).toHaveBeenCalled();\n            })\n            \n"],[0,"            desc"]],"start1":978,"start2":978,"length1":32,"length2":821}]],"length":6794,"saved":false}
{"contributors":[],"silentsave":false,"ts":1356882489269,"patch":[[{"diffs":[[0,"});\n"],[-1,"        \n        describe('Collisions', function () {\n            beforeEach(function () {\n                _spec.matter = new Matter();\n            });\n            \n            it('should have collision and collide function', function () {\n                expect(typeof _spec.matter.collision).toEqual('function');\n                expect(typeof _spec.matter.collide).toEqual('function');\n            });\n            \n            it('should call collide on both objects on collision', function () {\n                var matter = new Matter(),\n                    obj = new Matter(),\n                    spyMatter = sinon.spy(),\n                    spyObj = sinon.spy();\n                    \n                matter.x = 0;\n                matter.y = 0;\n                matter.boundingBox(10, 10, 5, 0);\n                matter.collide = spyMatter;\n                \n                obj.x = 0;\n                obj.y = 0;\n                obj.boundingBox(5, 5, 2.5, 0);\n                obj.collide = spyObj;\n            \n                expect(matter.collision(obj)).toEqual(true);\n                expect(spyMatter).toHaveBeenCalled();\n                expect(spyObj).toHaveBeenCalled();\n            })\n            \n            describe('Center distance collision', function () {\n                it('should be true when distance is within radii', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter._bounding.radius = 100;\n                    \n                    obj.x = 100;\n                    obj.y = 0;\n                    obj._bounding.radius = 100;\n                \n                    expect(_spec.matter._centerDistanceCollision(obj)).toEqual(true)\n                });\n                \n                it('should be false when distance is outside radii', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter._bounding.radius = 10;\n                    \n                    obj.x = 100;\n                    obj.y = 0;\n                    obj._bounding.radius = 10;\n                \n                    expect(_spec.matter._centerDistanceCollision(obj)).toEqual(false);\n                });\n                \n                it('should be true when distance is equal to radii', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter._bounding.radius = 50;\n                    \n                    obj.x = 100;\n                    obj.y = 0;\n                    obj._bounding.radius = 50;\n                \n                    expect(_spec.matter._centerDistanceCollision(obj)).toEqual(true);\n                });\n            });\n            \n            describe('Bounding box collision', function () {\n                it('should create bounding box from given parameters', function () {\n                    var matter = _spec.matter;\n                    \n                    // Set bounding box\n                    matter.boundingBox(10, 10, 5, 0);\n                    \n                    // Get bounding box\n                    var box = matter.boundingBox();\n                    \n                    expect(box.length).toEqual(4);\n                    expect(box[0].x).toBeCloseTo(5);\n                    expect(box[0].y).toBeCloseTo(-5);\n                    \n                    expect(box[1].x).toBeCloseTo(-5);\n                    expect(box[1].y).toBeCloseTo(-5);\n                    \n                    expect(box[2].x).toBeCloseTo(-5);\n                    expect(box[2].y).toBeCloseTo(5);\n                    \n                    expect(box[3].x).toBeCloseTo(5);\n                    expect(box[3].y).toBeCloseTo(5);\n                });\n                \n                it('should set radius when bounding box is set', function () {\n                    var matter = _spec.matter;\n                    \n                    // Set bounding box\n                    matter.boundingBox(5, 20, 5, 0);\n                    \n                    expect(matter._bounding.radius).toBeCloseTo(Math.sqrt(15*15 + 2.5*2.5),2);\n                })\n                \n                it('should be true when point is inside box', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter.boundingBox(10, 10, 5, 0);\n                    \n                    obj.x = 0;\n                    obj.y = 0;\n                    obj.boundingBox(5, 5, 2.5, 0);\n                \n                    expect(_spec.matter._boundingBoxCollision(obj)).toEqual(true);\n                })\n                \n                it('should be false when point is outside box', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 100;\n                    matter.y = 0;\n                    matter.boundingBox(10, 10, 5, 0);\n                    \n                    obj.x = 0;\n                    obj.y = 0;\n                    obj.boundingBox(5, 5, 2.5, 0);\n                \n                    expect(_spec.matter._boundingBoxCollision(obj)).toEqual(false);\n                })\n                \n                it('should be true when point is touching box', function () {\n                    var matter = _spec.matter,\n                        obj = new Matter();\n                    \n                    matter.x = 0;\n                    matter.y = 0;\n                    matter.boundingBox(10, 10, 5, 0);\n                    \n                    obj.x = 0;\n                    obj.y = 0;\n                    obj.boundingBox(10, 10, 5, 0);\n                \n                    expect(_spec.matter._boundingBoxCollision(obj)).toEqual(true);\n                })\n            })\n        });\n"],[0,"    "]],"start1":573,"start2":573,"length1":6215,"length2":8}]],"length":587,"saved":false}
{"ts":1356882492211,"patch":[[{"diffs":[[0,"  });\n})"],[1,";\n"]],"start1":579,"start2":579,"length1":8,"length2":10}]],"length":589,"saved":false}
